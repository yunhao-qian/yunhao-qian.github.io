(()=>{"use strict";var t,e,n,r,i={148:(t,e,n)=>{n.a(t,(async(t,r)=>{try{n.d(e,{Uw:()=>s.Uw,ai:()=>s.ai});var i=n(504),s=n(800),a=t([i]);i=(a.then?(await a)():a)[0],(0,s.lI)(i),r()}catch(t){r(t)}}))},800:(t,e,n)=>{let r;function i(t){r=t}n.d(e,{Qn:()=>A,Uw:()=>b,ai:()=>_,lI:()=>i,xv:()=>m}),t=n.hmd(t);let s=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});s.decode();let a=null;const o=new Array(128).fill(void 0);o.push(void 0,null,!0,!1);let c=o.length,l=null;function u(){return null!==l&&0!==l.byteLength||(l=new Int32Array(r.memory.buffer)),l}let d=null;function h(t){const e=function(t){return o[t]}(t);return function(t){t<132||(o[t]=c,c=t)}(t),e}const _=Object.freeze({Black:0,0:"Black",White:1,1:"White"}),p="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_action_free(t>>>0)));class g{static __wrap(t){t>>>=0;const e=Object.create(g.prototype);return e.__wbg_ptr=t,p.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,p.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_action_free(t)}get mask(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set mask(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}static from_mask(t){const e=r.action_from_mask(t);return g.__wrap(e)}static pass(){const t=r.action_pass();return g.__wrap(t)}static from_flat_index(t){const e=r.action_from_flat_index(t);return g.__wrap(e)}static from_row_column(t,e){const n=r.action_from_row_column(t,e);return g.__wrap(n)}is_pass(){return 0!==r.action_is_pass(this.__wbg_ptr)}flat_index(){return r.action_flat_index(this.__wbg_ptr)>>>0}row(){return r.action_row(this.__wbg_ptr)>>>0}column(){return r.action_column(this.__wbg_ptr)>>>0}}const f="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_state_free(t>>>0)));class b{static __wrap(t){t>>>=0;const e=Object.create(b.prototype);return e.__wbg_ptr=t,f.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,f.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_state_free(t)}get current_player(){return r.__wbg_get_state_current_player(this.__wbg_ptr)}set current_player(t){r.__wbg_set_state_current_player(this.__wbg_ptr,t)}get player_discs(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set player_discs(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}get opponent_discs(){const t=r.__wbg_get_state_opponent_discs(this.__wbg_ptr);return BigInt.asUintN(64,t)}set opponent_discs(t){r.__wbg_set_state_opponent_discs(this.__wbg_ptr,t)}get legal_moves(){const t=r.__wbg_get_state_legal_moves(this.__wbg_ptr);return BigInt.asUintN(64,t)}set legal_moves(t){r.__wbg_set_state_legal_moves(this.__wbg_ptr,t)}get was_pass(){return 0!==r.__wbg_get_state_was_pass(this.__wbg_ptr)}set was_pass(t){r.__wbg_set_state_was_pass(this.__wbg_ptr,t)}get is_endgame(){return 0!==r.__wbg_get_state_is_endgame(this.__wbg_ptr)}set is_endgame(t){r.__wbg_set_state_is_endgame(this.__wbg_ptr,t)}static new(){const t=r.state_new();return b.__wrap(t)}step(t){!function(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);t.ptr}(t,g);var e=t.__destroy_into_raw();const n=r.state_step(this.__wbg_ptr,e);return b.__wrap(n)}legal_move_vec(){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.state_legal_move_vec(i,this.__wbg_ptr);var t=u()[i/4+0],e=u()[i/4+1],n=function(t,e){t>>>=0;const n=(null!==d&&0!==d.byteLength||(d=new Uint32Array(r.memory.buffer)),d).subarray(t/4,t/4+e),i=[];for(let t=0;t<n.length;t++)i.push(h(n[t]));return i}(t,e).slice();return r.__wbindgen_free(t,4*e,4),n}finally{r.__wbindgen_add_to_stack_pointer(16)}}get_disc(t,e){const n=r.state_get_disc(this.__wbg_ptr,t,e);return 2===n?void 0:n}}function m(t){return function(t){c===o.length&&o.push(o.length+1);const e=c;return c=o[e],o[e]=t,e}(g.__wrap(t))}function A(t,e){throw new Error((n=t,i=e,n>>>=0,s.decode((null!==a&&0!==a.byteLength||(a=new Uint8Array(r.memory.buffer)),a).subarray(n,n+i))));var n,i}},208:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,SAAS;;EAET,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,0DAA0D;EAC1D,aAAa;;EAEb,2CAA2C;;EAE3C;yGACuG;EACvG,kBAAkB;AACpB;;AAEA;EACE;2CACyC;EACzC,iBAAiB;;EAEjB,gDAAgD;EAChD,WAAW;EACX,YAAY;;EAEZ;2CACyC;EACzC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,4DAA4D;EAC5D,gCAAgC;AAClC;;AAEA,gDAAgD;AAChD;EACE;IACE,WAAW;IACX,YAAY;EACd;AACF",sourcesContent:["html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n"],sourceRoot:""}]);const o=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},511:(t,e,n)=>{var r=n(72),i=n.n(r),s=n(825),a=n.n(s),o=n(659),c=n.n(o),l=n(56),u=n.n(l),d=n(540),h=n.n(d),_=n(113),p=n.n(_),g=n(208),f={};f.styleTagTransform=p(),f.setAttributes=u(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=h(),i()(g.A,f),g.A&&g.A.locals&&g.A.locals},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},a=[],o=0;o<t.length;o++){var c=t[o],l=r.base?c[0]+r.base:c[0],u=s[l]||0,d="".concat(l," ").concat(u);s[l]=u+1;var h=n(d),_={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(_);else{var p=i(_,r);r.byIndex=o,e.splice(o,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var o=n(s[a]);e[o].references--}for(var c=r(t,i),l=0;l<s.length;l++){var u=n(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},156:(t,e,n)=>{n.a(t,(async(t,e)=>{try{n(511);var r=n(148),i=t([r]);r=(i.then?(await i)():i)[0];var s=function(t,e,n,r){return new(n||(n=Promise))((function(i,s){function a(t){try{c(r.next(t))}catch(t){s(t)}}function o(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}c((r=r.apply(t,e||[])).next())}))};function o(){return s(this,void 0,void 0,(function*(){const t=document.querySelector("#game-svg-container");t.innerHTML="";const e=new c;t.appendChild(e.getSVG());const n=r.Uw.new();yield e.setSquareStatesFromGameState(n)}))}class c{constructor(){this.svg=document.createElementNS(l,"svg"),this.initialize()}getSVG(){return this.svg}setSquareStatesFromGameState(t){return s(this,void 0,void 0,(function*(){const e=t.legal_move_vec().map((t=>t.flat_index())),n=t.current_player===r.ai.Black?a.BlackLegalMove:a.WhiteLegalMove,i=[];for(let s=0;s<8;++s)for(let o=0;o<8;++o){let c;switch(t.get_disc(s,o)){case r.ai.Black:c=a.Black;break;case r.ai.White:c=a.White;break;default:{const t=8*s+o;c=e.includes(t)?n:a.Empty}}i.push(this.setSquareState(s,o,c))}yield Promise.all(i)}))}getSquareState(t,e){return this.squares[t][e].getState()}setSquareState(t,e,n){return s(this,void 0,void 0,(function*(){yield this.squares[t][e].setState(n)}))}initialize(){this.svg.setAttribute("id","game-svg");const t=c.squareOffsetX+8*c.squareSize+c.marginWidth,e=c.squareOffsetY+8*c.squareSize+c.marginWidth;this.svg.setAttribute("viewBox",`0 0 ${t} ${e}`),this.svg.innerHTML="",this.createDefs(),this.createBoard(),this.createDiscViews()}createDefs(){const t=document.createElementNS(l,"defs");for(const[e,n,r]of[[c.blackDiscGradientId,"rgb(32, 32, 32)","rgb(24, 24, 24)"],[c.whiteDiscGradientId,"rgb(224, 224, 244)","rgb(168, 168, 168)"]]){const i=document.createElementNS(l,"radialGradient");i.setAttribute("id",e);{const t=document.createElementNS(l,"stop");t.setAttribute("offset","90%"),t.setAttribute("stop-color",n),i.appendChild(t)}{const t=document.createElementNS(l,"stop");t.setAttribute("offset","100%"),t.setAttribute("stop-color",r),i.appendChild(t)}t.appendChild(i)}{const e=document.createElementNS(l,"filter");e.setAttribute("id",c.shadowFilterId);{const t=document.createElementNS(l,"feDropShadow");t.setAttribute("dx","0"),t.setAttribute("dy","0"),t.setAttribute("stdDeviation","0.3"),t.setAttribute("flood-color","black"),t.setAttribute("flood-opacity","1"),e.appendChild(t)}t.appendChild(e)}this.svg.appendChild(t)}createBoard(){{const t=document.createElementNS(l,"rect");t.setAttribute("x",c.squareOffsetX.toString()),t.setAttribute("y",c.squareOffsetY.toString()),t.setAttribute("width",(8*c.squareSize).toString()),t.setAttribute("height",(8*c.squareSize).toString()),t.setAttribute("fill",c.boardBackgroundColor),this.svg.appendChild(t)}{const t=document.createElementNS(l,"g");t.setAttribute("stroke","black"),t.setAttribute("stroke-width",c.gridStrokeWidth.toString());for(let e=0;e<9;++e){{const n=c.squareOffsetX,r=c.squareOffsetX+8*c.squareSize,i=c.squareOffsetY+e*c.squareSize;t.appendChild(d(n,i,r,i))}{const n=c.squareOffsetX+e*c.squareSize,r=c.squareOffsetY,i=c.squareOffsetY+8*c.squareSize;t.appendChild(d(n,r,n,i))}}this.svg.appendChild(t)}{const t=document.createElementNS(l,"rect");t.setAttribute("x",(c.squareOffsetX-.5*c.borderStrokeWidth).toString()),t.setAttribute("y",(c.squareOffsetY-.5*c.borderStrokeWidth).toString());{const e=(8*c.squareSize+c.borderStrokeWidth).toString();t.setAttribute("width",e),t.setAttribute("height",e)}{const e=(.5*c.borderStrokeWidth).toString();t.setAttribute("rx",e),t.setAttribute("ry",e)}t.setAttribute("stroke","black"),t.setAttribute("stroke-width",c.borderStrokeWidth.toString()),t.setAttribute("fill","none"),this.svg.appendChild(t)}{const t=document.createElementNS(l,"g");t.setAttribute("fill","black");for(const e of[2,6]){const n=c.squareOffsetX+e*c.squareSize;for(const e of[2,6]){const r=c.squareOffsetY+e*c.squareSize,i=document.createElementNS(l,"circle");i.setAttribute("cx",n.toString()),i.setAttribute("cy",r.toString()),i.setAttribute("r",c.dotRadius.toString()),t.appendChild(i)}}this.svg.appendChild(t)}{const t=document.createElementNS(l,"g");t.setAttribute("fill","white"),t.setAttribute("font-family",c.labelFontFamily),t.setAttribute("font-size",c.labelFontSize.toString()),t.setAttribute("text-anchor","middle"),t.setAttribute("dominant-baseline","central");{const e=["a","b","c","d","e","f","g","h"],n=.5*c.squareOffsetY;for(let r=0;r<8;++r){const i=c.squareOffsetX+(r+.5)*c.squareSize;t.appendChild(h(i,n,e[r]))}}{const e=["1","2","3","4","5","6","7","8"],n=.5*c.squareOffsetX;for(let r=0;r<8;++r){const i=c.squareOffsetY+(r+.5)*c.squareSize;t.appendChild(h(n,i,e[r]))}}this.svg.appendChild(t)}}createDiscViews(){this.squares=[];for(let t=0;t<8;++t){const e=[];for(let n=0;n<8;++n){const r=c.squareOffsetX+(t+.5)*c.squareSize,i=c.squareOffsetY+(n+.5)*c.squareSize;e.push(new u(this.svg,r,i))}this.squares.push(e)}}}c.blackDiscGradientId="black-disc-gradient",c.whiteDiscGradientId="white-disc-gradient",c.shadowFilterId="shadow-filter",c.marginWidth=5,c.squareOffsetX=10,c.squareOffsetY=10,c.squareSize=10,c.gridStrokeWidth=.2,c.borderStrokeWidth=1,c.dotRadius=.75,c.labelFontFamily="serif",c.labelFontSize=5,c.boardBackgroundColor="rgb(63, 142, 106)";const l="http://www.w3.org/2000/svg";var a;!function(t){t[t.Empty=0]="Empty",t[t.Black=1]="Black",t[t.White=2]="White",t[t.BlackLegalMove=3]="BlackLegalMove",t[t.WhiteLegalMove=4]="WhiteLegalMove"}(a||(a={}));class u{constructor(t,e,n){this.svg=t,this.centerX=e,this.centerY=n,this.state=a.Empty,this.disc=null}getState(){return this.state}setState(t){return s(this,void 0,void 0,(function*(){if(this.state!==t){if(t===a.Empty)this.svg.removeChild(this.disc),this.disc=null;else{let e,n,r,i,s;switch(t){case a.Black:case a.White:e=2*u.discRadius,n=u.discRadius,r=`url('#${t===a.Black?c.blackDiscGradientId:c.whiteDiscGradientId}')`,i=1,s=`url('#${c.shadowFilterId}')`;break;case a.BlackLegalMove:case a.WhiteLegalMove:e=u.legalMoveSquareSize,n=0;const o=t===a.BlackLegalMove?0:255;r=`rgb(${o}, ${o}, ${o})`,i=.5,s="none";break;default:throw new Error("Invalid state")}null===this.disc&&(this.disc=document.createElementNS(l,"rect"),this.disc.setAttribute("transform",`translate(${this.centerX}, ${this.centerY}) rotate(45, 0, 0)`),this.svg.appendChild(this.disc));{const t=(.5*-e).toString();this.disc.setAttribute("x",t),this.disc.setAttribute("y",t)}{const t=e.toString();this.disc.setAttribute("width",t),this.disc.setAttribute("height",t)}{const t=n.toString();this.disc.setAttribute("rx",t),this.disc.setAttribute("ry",t)}this.disc.setAttribute("fill",r),this.disc.setAttribute("fill-opacity",i.toString()),this.disc.setAttribute("filter",s)}this.state=t}}))}}function d(t,e,n,r){const i=document.createElementNS(l,"line");return i.setAttribute("x1",t.toString()),i.setAttribute("y1",e.toString()),i.setAttribute("x2",n.toString()),i.setAttribute("y2",r.toString()),i}function h(t,e,n){const r=document.createElementNS(l,"text");return r.setAttribute("x",t.toString()),r.setAttribute("y",e.toString()),r.textContent=n,r}u.discRadius=4,u.legalMoveSquareSize=5,o().catch(console.error),e()}catch(_){e(_)}}))},504:(t,e,n)=>{var r=n(800);t.exports=n.v(e,t.id,"47aa7487e557f47cb90f",{"./othello_rs_bg.js":{__wbg_action_new:r.xv,__wbindgen_throw:r.Qn}})}},s={};function a(t){var e=s[t];if(void 0!==e)return e.exports;var n=s[t]={id:t,loaded:!1,exports:{}};return i[t](n,n.exports,a),n.loaded=!0,n.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var c,l,u,d=new Set,h=i.exports,_=new Promise(((t,e)=>{u=e,l=t}));_[e]=h,_[t]=t=>(o&&t(o),d.forEach(t),_.catch((t=>{}))),i.exports=_,s((i=>{var s;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[t])return i;if(i.then){var s=[];s.d=0,i.then((t=>{a[e]=t,r(s)}),(t=>{a[n]=t,r(s)}));var a={};return a[t]=t=>t(s),a}}var o={};return o[t]=t=>{},o[e]=i,o})))(i);var a=()=>c.map((t=>{if(t[n])throw t[n];return t[e]})),l=new Promise((e=>{(s=()=>e(a)).r=0;var n=t=>t!==o&&!d.has(t)&&(d.add(t),t&&!t.d&&(s.r++,t.push(s)));c.map((e=>e[t](n)))}));return s.r?l:a()}),(t=>(t?u(_[n]=t):l(h),r(o)))),o&&o.d<0&&(o.d=0)},a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var n in e)a.o(e,n)&&!a.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a.v=(t,e,n,r)=>{var i=fetch(a.p+""+n+".module.wasm"),s=()=>i.then((t=>t.arrayBuffer())).then((t=>WebAssembly.instantiate(t,r))).then((e=>Object.assign(t,e.instance.exports)));return i.then((e=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(e,r).then((e=>Object.assign(t,e.instance.exports)),(t=>{if("application/wasm"!==e.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t),s();throw t})):s()))},(()=>{var t;a.g.importScripts&&(t=a.g.location+"");var e=a.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=t})(),a.nc=void 0,a(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,