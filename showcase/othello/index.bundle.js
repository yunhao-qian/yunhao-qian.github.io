(()=>{"use strict";var t,e,n,r,i={148:(t,e,n)=>{n.a(t,(async(t,r)=>{try{n.d(e,{Uw:()=>a.Uw,ai:()=>a.ai,rc:()=>a.rc});var i=n(504),a=n(800),o=t([i]);i=(o.then?(await o)():o)[0],(0,a.lI)(i),r()}catch(t){r(t)}}))},800:(t,e,n)=>{let r;function i(t){r=t}n.d(e,{Qn:()=>A,Uw:()=>m,ai:()=>p,lI:()=>i,rc:()=>_,xv:()=>b}),t=n.hmd(t);let a=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});a.decode();let o=null;const s=new Array(128).fill(void 0);s.push(void 0,null,!0,!1);let c=s.length,l=null;function u(){return null!==l&&0!==l.byteLength||(l=new Int32Array(r.memory.buffer)),l}let d=null;function h(t){const e=function(t){return s[t]}(t);return function(t){t<132||(s[t]=c,c=t)}(t),e}const p=Object.freeze({Black:0,0:"Black",White:1,1:"White"}),g="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_action_free(t>>>0)));class _{static __wrap(t){t>>>=0;const e=Object.create(_.prototype);return e.__wbg_ptr=t,g.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,g.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_action_free(t)}get mask(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set mask(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}static from_mask(t){const e=r.action_from_mask(t);return _.__wrap(e)}static pass(){const t=r.action_pass();return _.__wrap(t)}static from_flat_index(t){const e=r.action_from_flat_index(t);return _.__wrap(e)}static from_row_column(t,e){const n=r.action_from_row_column(t,e);return _.__wrap(n)}is_pass(){return 0!==r.action_is_pass(this.__wbg_ptr)}flat_index(){return r.action_flat_index(this.__wbg_ptr)>>>0}row(){return r.action_row(this.__wbg_ptr)>>>0}column(){return r.action_column(this.__wbg_ptr)>>>0}}const f="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_state_free(t>>>0)));class m{static __wrap(t){t>>>=0;const e=Object.create(m.prototype);return e.__wbg_ptr=t,f.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,f.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_state_free(t)}get current_player(){return r.__wbg_get_state_current_player(this.__wbg_ptr)}set current_player(t){r.__wbg_set_state_current_player(this.__wbg_ptr,t)}get player_discs(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set player_discs(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}get opponent_discs(){const t=r.__wbg_get_state_opponent_discs(this.__wbg_ptr);return BigInt.asUintN(64,t)}set opponent_discs(t){r.__wbg_set_state_opponent_discs(this.__wbg_ptr,t)}get legal_moves(){const t=r.__wbg_get_state_legal_moves(this.__wbg_ptr);return BigInt.asUintN(64,t)}set legal_moves(t){r.__wbg_set_state_legal_moves(this.__wbg_ptr,t)}get was_pass(){return 0!==r.__wbg_get_state_was_pass(this.__wbg_ptr)}set was_pass(t){r.__wbg_set_state_was_pass(this.__wbg_ptr,t)}get is_endgame(){return 0!==r.__wbg_get_state_is_endgame(this.__wbg_ptr)}set is_endgame(t){r.__wbg_set_state_is_endgame(this.__wbg_ptr,t)}static new(){const t=r.state_new();return m.__wrap(t)}step(t){!function(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);t.ptr}(t,_);var e=t.__destroy_into_raw();const n=r.state_step(this.__wbg_ptr,e);return m.__wrap(n)}legal_move_vec(){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.state_legal_move_vec(i,this.__wbg_ptr);var t=u()[i/4+0],e=u()[i/4+1],n=function(t,e){t>>>=0;const n=(null!==d&&0!==d.byteLength||(d=new Uint32Array(r.memory.buffer)),d).subarray(t/4,t/4+e),i=[];for(let t=0;t<n.length;t++)i.push(h(n[t]));return i}(t,e).slice();return r.__wbindgen_free(t,4*e,4),n}finally{r.__wbindgen_add_to_stack_pointer(16)}}get_disc(t,e){const n=r.state_get_disc(this.__wbg_ptr,t,e);return 2===n?void 0:n}}function b(t){return function(t){c===s.length&&s.push(s.length+1);const e=c;return c=s[e],s[e]=t,e}(_.__wrap(t))}function A(t,e){throw new Error((n=t,i=e,n>>>=0,a.decode((null!==o&&0!==o.byteLength||(o=new Uint8Array(r.memory.buffer)),o).subarray(n,n+i))));var n,i}},208:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),i=n.n(r),a=n(314),o=n.n(a)()(i());o.push([t.id,"html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,SAAS;;EAET,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,0DAA0D;EAC1D,aAAa;;EAEb,2CAA2C;;EAE3C;yGACuG;EACvG,kBAAkB;AACpB;;AAEA;EACE;2CACyC;EACzC,iBAAiB;;EAEjB,gDAAgD;EAChD,WAAW;EACX,YAAY;;EAEZ;2CACyC;EACzC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,4DAA4D;EAC5D,gCAAgC;AAClC;;AAEA,gDAAgD;AAChD;EACE;IACE,WAAW;IACX,YAAY;EACd;AACF;;AAEA,sDAAsD;AACtD;EACE,sDAAsD;EACtD,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:["html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n"],sourceRoot:""}]);const s=o},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,a){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&o[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},511:(t,e,n)=>{var r=n(72),i=n.n(r),a=n(825),o=n.n(a),s=n(659),c=n.n(s),l=n(56),u=n.n(l),d=n(540),h=n.n(d),p=n(113),g=n.n(p),_=n(208),f={};f.styleTagTransform=g(),f.setAttributes=u(),f.insert=c().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=h(),i()(_.A,f),_.A&&_.A.locals&&_.A.locals},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},o=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var g=i(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:g,references:1})}o.push(d)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var a=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var s=n(a[o]);e[s].references--}for(var c=r(t,i),l=0;l<a.length;l++){var u=n(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},156:(t,e,n)=>{n.a(t,(async(t,e)=>{try{n(511);var r=n(148),i=t([r]);r=(i.then?(await i)():i)[0];var a=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{c(r.next(t))}catch(t){a(t)}}function s(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}c((r=r.apply(t,e||[])).next())}))};function s(){return a(this,void 0,void 0,(function*(){const t=document.querySelector("#game-svg-container");t.innerHTML="";const e=new c,n=new l(e.getSVG());t.appendChild(e.getSVG());{let t=r.Uw.new();for(yield e.setSquareStatesFromGameState(t);!t.is_endgame;){const i=t.legal_move_vec();let a;0===i.length?(alert(`${t.current_player} is out of moves`),a=r.rc.pass()):a=yield n.getMove(i),t=t.step(a),yield e.setSquareStatesFromGameState(t)}alert("Game is over!")}}))}class c{constructor(){this.svg=document.createElementNS(u,"svg"),this.initialize()}getSVG(){return this.svg}setSquareStatesFromGameState(t){return a(this,void 0,void 0,(function*(){const e=t.legal_move_vec().map((t=>t.flat_index())),n=t.current_player===r.ai.Black?o.BlackLegalMove:o.WhiteLegalMove;let i=!0;const a=[];for(let s=0;s<8;++s){const c=[];for(let a=0;a<8;++a){let l;switch(t.get_disc(s,a)){case r.ai.Black:l=o.Black;break;case r.ai.White:l=o.White;break;default:{const t=8*s+a;l=e.includes(t)?n:o.Empty}}l!==this.squares[s][a].getState()&&(i=!1),c.push(l)}a.push(c)}if(!i){for(let t=0;t<8;++t)for(let e=0;e<8;++e)this.squares[t][e].setState(a[t][e]);this.svg.animationsPaused()&&this.svg.unpauseAnimations(),this.svg.setCurrentTime(0),yield new Promise((t=>setTimeout(t,1e3*d.animationDuration)))}}))}initialize(){this.svg.setAttribute("id","game-svg");const t=8*c.squareSize+2*c.marginWidth;this.svg.setAttribute("viewBox",`0 0 ${t} ${t}`),this.svg.innerHTML="",this.createDefs(),this.createBoard(),this.createDiscViews()}createDefs(){const t=document.createElementNS(u,"defs");for(const[e,n,r]of[[c.blackDiscGradientId,"rgb(32, 32, 32)","rgb(24, 24, 24)"],[c.whiteDiscGradientId,"rgb(224, 224, 244)","rgb(168, 168, 168)"]]){const i=document.createElementNS(u,"radialGradient");i.setAttribute("id",e);{const t=document.createElementNS(u,"stop");t.setAttribute("offset","90%"),t.setAttribute("stop-color",n),i.appendChild(t)}{const t=document.createElementNS(u,"stop");t.setAttribute("offset","100%"),t.setAttribute("stop-color",r),i.appendChild(t)}t.appendChild(i)}{const e=document.createElementNS(u,"filter");e.setAttribute("id",c.shadowFilterId);{const t=document.createElementNS(u,"feDropShadow");t.setAttribute("dx","0"),t.setAttribute("dy","0"),t.setAttribute("stdDeviation","0.3"),t.setAttribute("flood-color","black"),t.setAttribute("flood-opacity","1"),e.appendChild(t)}t.appendChild(e)}this.svg.appendChild(t)}createBoard(){{const t=document.createElementNS(u,"rect");for(const e of["x","y"])t.setAttribute(e,c.marginWidth.toString());for(const e of["width","height"])t.setAttribute(e,(8*c.squareSize).toString());t.setAttribute("fill",c.boardBackgroundColor),this.svg.appendChild(t)}{const t=document.createElementNS(u,"g");t.setAttribute("stroke","black"),t.setAttribute("stroke-width",c.gridStrokeWidth.toString());for(let e=0;e<9;++e){const n=c.marginWidth+e*c.squareSize,r=c.marginWidth,i=c.marginWidth+8*c.squareSize;t.appendChild(c.createLine(n,r,n,i)),t.appendChild(c.createLine(r,n,i,n))}this.svg.appendChild(t)}{const t=document.createElementNS(u,"rect");for(const e of["x","y"])t.setAttribute(e,(c.marginWidth-.5*c.borderStrokeWidth).toString());{const e=(8*c.squareSize+c.borderStrokeWidth).toString();t.setAttribute("width",e),t.setAttribute("height",e)}{const e=(.5*c.borderStrokeWidth).toString();t.setAttribute("rx",e),t.setAttribute("ry",e)}t.setAttribute("stroke","black"),t.setAttribute("stroke-width",c.borderStrokeWidth.toString()),t.setAttribute("fill","none"),this.svg.appendChild(t)}{const t=document.createElementNS(u,"g");t.setAttribute("fill","black");for(const e of[2,6]){const n=c.marginWidth+e*c.squareSize;for(const e of[2,6]){const r=c.marginWidth+e*c.squareSize,i=document.createElementNS(u,"circle");i.setAttribute("cx",n.toString()),i.setAttribute("cy",r.toString()),i.setAttribute("r",c.dotRadius.toString()),t.appendChild(i)}}this.svg.appendChild(t)}}createDiscViews(){this.squares=[];for(let t=0;t<8;++t){const e=[];for(let n=0;n<8;++n){const r=c.marginWidth+(n+.5)*c.squareSize,i=c.marginWidth+(t+.5)*c.squareSize;e.push(new d(this.svg,r,i))}this.squares.push(e)}}static createLine(t,e,n,r){const i=document.createElementNS(u,"line");return i.setAttribute("x1",t.toString()),i.setAttribute("y1",e.toString()),i.setAttribute("x2",n.toString()),i.setAttribute("y2",r.toString()),i}static createText(t,e,n){const r=document.createElementNS(u,"text");return r.setAttribute("x",t.toString()),r.setAttribute("y",e.toString()),r.textContent=n,r}}c.blackDiscGradientId="black-disc-gradient",c.whiteDiscGradientId="white-disc-gradient",c.shadowFilterId="shadow-filter",c.squareSize=10,c.marginWidth=5,c.gridStrokeWidth=.2,c.borderStrokeWidth=1,c.dotRadius=.75,c.labelFontFamily="serif",c.labelFontSize=5,c.boardBackgroundColor="rgb(63, 142, 106)";class l{constructor(t){this.svg=t,this.onClick=t=>{if(0===this.legalMoveFlatIndices.length){if(null!==this.resolveActionPromise)throw new Error("No legal move is available but an action promise is set");return}if(null===this.resolveActionPromise)throw new Error("Legal moves are available but no action promise is set");const e=new DOMPoint(t.clientX,t.clientY),n=this.svg.getScreenCTM();if(null===n)throw new Error("Failed to get the screen CTM");const i=e.matrixTransform(n.inverse());let a=(i.y-c.marginWidth)/c.squareSize;if(a<0||a>=8)return;a=Math.floor(a);let o=(i.x-c.marginWidth)/c.squareSize;if(o<0||o>=8)return;o=Math.floor(o);const s=8*a+o;if(!this.legalMoveFlatIndices.includes(s))return;this.legalMoveFlatIndices=[];const l=this.resolveActionPromise;this.resolveActionPromise=null,l(r.rc.from_flat_index(s))},this.svg.addEventListener("click",this.onClick),this.legalMoveFlatIndices=[],this.resolveActionPromise=null}getMove(t){if(0===t.length)throw new Error("No legal move is available");return this.legalMoveFlatIndices=t.map((t=>t.flat_index())),new Promise((t=>{this.resolveActionPromise=t}))}}const u="http://www.w3.org/2000/svg";var o;!function(t){t[t.Empty=0]="Empty",t[t.Black=1]="Black",t[t.White=2]="White",t[t.BlackLegalMove=3]="BlackLegalMove",t[t.WhiteLegalMove=4]="WhiteLegalMove"}(o||(o={}));class d{constructor(t,e,n){this.svg=t,this.centerX=e,this.centerY=n,this.state=o.Empty,this.group=null}getState(){return this.state}setState(t){if(t===o.Empty&&this.state===o.Empty)return void(null!==this.group&&(this.group.innerHTML=""));const e=d.getDiscVisualProps(this.state,t),n=d.getDiscVisualProps(t,this.state);null!==this.group?this.group.innerHTML="":(this.group=document.createElementNS(u,"g"),this.group.setAttribute("transform",`translate(${this.centerX}, ${this.centerY})`));const r=document.createElementNS(u,"rect");r.setAttribute("fill","black"),r.setAttribute("filter",`url('#${c.shadowFilterId}')`),this.group.appendChild(r);const i=document.createElementNS(u,"rect");i.setAttribute("transform","rotate(45, 0, 0)"),this.group.appendChild(i);const a=document.createElementNS(u,"rect");a.setAttribute("fill",`url('#${c.blackDiscGradientId}')`),this.group.appendChild(a);const s=document.createElementNS(u,"rect");if(s.setAttribute("fill",`url('#${c.whiteDiscGradientId}')`),this.group.appendChild(s),!(this.state!==o.BlackLegalMove&&this.state!==o.WhiteLegalMove||t!==o.Black&&t!==o.White))for(const t of[r,a,s])t.setAttribute("transform","rotate(45, 0, 0)");if(this.state===o.Black&&t===o.White||this.state===o.White&&t===o.Black){const t=document.createElementNS(u,"animateTransform");t.setAttribute("attributeName","transform"),t.setAttribute("attributeType","XML"),t.setAttribute("dur",`${d.animationDuration}s`),t.setAttribute("calcMode","spline"),t.setAttribute("fill","freeze"),t.setAttribute("type","scale"),t.setAttribute("values","1 1; 0.2 1; 1 1"),t.setAttribute("keyTimes","0;0.5;1"),t.setAttribute("keySplines","0.5 0.1 0.9 0.5;0.1 0.5 0.5 0.9");for(const e of[r,a,s])e.appendChild(t.cloneNode())}for(const t of[r,i,a,s]){for(const r of["x","y"])d.addAttributeOrAnimation(t,r,.5*-e.size,.5*-n.size);for(const r of["width","height"])d.addAttributeOrAnimation(t,r,e.size,n.size);for(const r of["rx","ry"])d.addAttributeOrAnimation(t,r,e.cornerRadius,n.cornerRadius)}d.addAttributeOrAnimation(r,"opacity",e.shadowOpacity,n.shadowOpacity),d.addAttributeOrAnimation(i,"fill",e.legalMoveIndicatorFill,n.legalMoveIndicatorFill),d.addAttributeOrAnimation(i,"fill-opacity",e.legalMoveIndicatorOpacity,n.legalMoveIndicatorOpacity),d.addAttributeOrAnimation(a,"fill-opacity",e.blackDiscOpacity,n.blackDiscOpacity),d.addAttributeOrAnimation(s,"fill-opacity",e.whiteDiscOpacity,n.whiteDiscOpacity),this.svg.appendChild(this.group),this.state=t}static getDiscVisualProps(t,e){if(t===o.Empty&&e===o.Empty)throw new Error("state and counterpart cannot both be empty");let n,r,i,a,s,c,l;if(t===o.Empty){const o=d.getDiscVisualProps(e,t);n=.5*o.size,r=.5*o.cornerRadius,i=0,a=o.legalMoveIndicatorFill,s=0,c=0,l=0}else{switch(t){case o.Black:case o.White:n=2*d.discRadius,r=d.discRadius,i=1,s=0,t===o.Black?(c=1,l=0):(c=0,l=1);break;case o.BlackLegalMove:case o.WhiteLegalMove:n=d.legalMoveSquareSize,r=0,i=0,s=.5,c=0,l=0;break;default:throw new Error("Invalid state")}switch(t){case o.Black:case o.BlackLegalMove:a="black";break;case o.White:case o.WhiteLegalMove:a="white";break;default:throw new Error("Invalid state")}}return{size:n,cornerRadius:r,shadowOpacity:i,legalMoveIndicatorFill:a,legalMoveIndicatorOpacity:s,blackDiscOpacity:c,whiteDiscOpacity:l}}static addAttributeOrAnimation(t,e,n,r){if(n===r)return void t.setAttribute(e,r.toString());const i=document.createElementNS(u,"animate");i.setAttribute("attributeName",e),i.setAttribute("dur",`${d.animationDuration}s`),i.setAttribute("calcMode","spline"),i.setAttribute("fill","freeze"),i.setAttribute("values",`${n};${r}`),i.setAttribute("keyTimes","0;1"),i.setAttribute("keySplines","0.1 0.5 0.5 0.9"),t.appendChild(i)}}d.animationDuration=.5,d.discRadius=4,d.legalMoveSquareSize=4,s().catch(console.error),e()}catch(h){e(h)}}))},504:(t,e,n)=>{var r=n(800);t.exports=n.v(e,t.id,"baab4132998f0614f037",{"./othello_rs_bg.js":{__wbg_action_new:r.xv,__wbindgen_throw:r.Qn}})}},a={};function o(t){var e=a[t];if(void 0!==e)return e.exports;var n=a[t]={id:t,loaded:!1,exports:{}};return i[t](n,n.exports,o),n.loaded=!0,n.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},o.a=(i,a,o)=>{var s;o&&((s=[]).d=-1);var c,l,u,d=new Set,h=i.exports,p=new Promise(((t,e)=>{u=e,l=t}));p[e]=h,p[t]=t=>(s&&t(s),d.forEach(t),p.catch((t=>{}))),i.exports=p,a((i=>{var a;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[t])return i;if(i.then){var a=[];a.d=0,i.then((t=>{o[e]=t,r(a)}),(t=>{o[n]=t,r(a)}));var o={};return o[t]=t=>t(a),o}}var s={};return s[t]=t=>{},s[e]=i,s})))(i);var o=()=>c.map((t=>{if(t[n])throw t[n];return t[e]})),l=new Promise((e=>{(a=()=>e(o)).r=0;var n=t=>t!==s&&!d.has(t)&&(d.add(t),t&&!t.d&&(a.r++,t.push(a)));c.map((e=>e[t](n)))}));return a.r?l:o()}),(t=>(t?u(p[n]=t):l(h),r(s)))),s&&s.d<0&&(s.d=0)},o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.v=(t,e,n,r)=>{var i=fetch(o.p+""+n+".module.wasm"),a=()=>i.then((t=>t.arrayBuffer())).then((t=>WebAssembly.instantiate(t,r))).then((e=>Object.assign(t,e.instance.exports)));return i.then((e=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(e,r).then((e=>Object.assign(t,e.instance.exports)),(t=>{if("application/wasm"!==e.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t),a();throw t})):a()))},(()=>{var t;o.g.importScripts&&(t=o.g.location+"");var e=o.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t})(),o.nc=void 0,o(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,