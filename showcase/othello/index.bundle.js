(()=>{"use strict";var t,e,n,r,i={148:(t,e,n)=>{n.a(t,(async(t,r)=>{try{n.d(e,{Uw:()=>s.Uw,ai:()=>s.ai,rc:()=>s.rc});var i=n(504),s=n(800),a=t([i]);i=(a.then?(await a)():a)[0],(0,s.lI)(i),r()}catch(t){r(t)}}))},800:(t,e,n)=>{let r;function i(t){r=t}n.d(e,{Qn:()=>A,Uw:()=>f,ai:()=>p,lI:()=>i,rc:()=>_,xv:()=>b}),t=n.hmd(t);let s=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});s.decode();let a=null;const o=new Array(128).fill(void 0);o.push(void 0,null,!0,!1);let c=o.length,l=null;function u(){return null!==l&&0!==l.byteLength||(l=new Int32Array(r.memory.buffer)),l}let d=null;function h(t){const e=function(t){return o[t]}(t);return function(t){t<132||(o[t]=c,c=t)}(t),e}const p=Object.freeze({Black:0,0:"Black",White:1,1:"White"}),g="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_action_free(t>>>0)));class _{static __wrap(t){t>>>=0;const e=Object.create(_.prototype);return e.__wbg_ptr=t,g.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,g.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_action_free(t)}get mask(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set mask(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}static from_mask(t){const e=r.action_from_mask(t);return _.__wrap(e)}static pass(){const t=r.action_pass();return _.__wrap(t)}static from_flat_index(t){const e=r.action_from_flat_index(t);return _.__wrap(e)}static from_row_column(t,e){const n=r.action_from_row_column(t,e);return _.__wrap(n)}is_pass(){return 0!==r.action_is_pass(this.__wbg_ptr)}flat_index(){return r.action_flat_index(this.__wbg_ptr)>>>0}row(){return r.action_row(this.__wbg_ptr)>>>0}column(){return r.action_column(this.__wbg_ptr)>>>0}}const m="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_state_free(t>>>0)));class f{static __wrap(t){t>>>=0;const e=Object.create(f.prototype);return e.__wbg_ptr=t,m.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,m.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_state_free(t)}get current_player(){return r.__wbg_get_state_current_player(this.__wbg_ptr)}set current_player(t){r.__wbg_set_state_current_player(this.__wbg_ptr,t)}get player_discs(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set player_discs(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}get opponent_discs(){const t=r.__wbg_get_state_opponent_discs(this.__wbg_ptr);return BigInt.asUintN(64,t)}set opponent_discs(t){r.__wbg_set_state_opponent_discs(this.__wbg_ptr,t)}get legal_moves(){const t=r.__wbg_get_state_legal_moves(this.__wbg_ptr);return BigInt.asUintN(64,t)}set legal_moves(t){r.__wbg_set_state_legal_moves(this.__wbg_ptr,t)}get was_pass(){return 0!==r.__wbg_get_state_was_pass(this.__wbg_ptr)}set was_pass(t){r.__wbg_set_state_was_pass(this.__wbg_ptr,t)}get is_endgame(){return 0!==r.__wbg_get_state_is_endgame(this.__wbg_ptr)}set is_endgame(t){r.__wbg_set_state_is_endgame(this.__wbg_ptr,t)}static new(){const t=r.state_new();return f.__wrap(t)}step(t){!function(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);t.ptr}(t,_);var e=t.__destroy_into_raw();const n=r.state_step(this.__wbg_ptr,e);return f.__wrap(n)}legal_move_vec(){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.state_legal_move_vec(i,this.__wbg_ptr);var t=u()[i/4+0],e=u()[i/4+1],n=function(t,e){t>>>=0;const n=(null!==d&&0!==d.byteLength||(d=new Uint32Array(r.memory.buffer)),d).subarray(t/4,t/4+e),i=[];for(let t=0;t<n.length;t++)i.push(h(n[t]));return i}(t,e).slice();return r.__wbindgen_free(t,4*e,4),n}finally{r.__wbindgen_add_to_stack_pointer(16)}}get_disc(t,e){const n=r.state_get_disc(this.__wbg_ptr,t,e);return 2===n?void 0:n}}function b(t){return function(t){c===o.length&&o.push(o.length+1);const e=c;return c=o[e],o[e]=t,e}(_.__wrap(t))}function A(t,e){throw new Error((n=t,i=e,n>>>=0,s.decode((null!==a&&0!==a.byteLength||(a=new Uint8Array(r.memory.buffer)),a).subarray(n,n+i))));var n,i}},208:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,SAAS;;EAET,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,0DAA0D;EAC1D,aAAa;;EAEb,2CAA2C;;EAE3C;yGACuG;EACvG,kBAAkB;AACpB;;AAEA;EACE;2CACyC;EACzC,iBAAiB;;EAEjB,gDAAgD;EAChD,WAAW;EACX,YAAY;;EAEZ;2CACyC;EACzC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,4DAA4D;EAC5D,gCAAgC;AAClC;;AAEA,gDAAgD;AAChD;EACE;IACE,WAAW;IACX,YAAY;EACd;AACF;;AAEA,sDAAsD;AACtD;EACE,sDAAsD;EACtD,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:["html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n"],sourceRoot:""}]);const o=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},511:(t,e,n)=>{var r=n(72),i=n.n(r),s=n(825),a=n.n(s),o=n(659),c=n.n(o),l=n(56),u=n.n(l),d=n(540),h=n.n(d),p=n(113),g=n.n(p),_=n(208),m={};m.styleTagTransform=g(),m.setAttributes=u(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=h(),i()(_.A,m),_.A&&_.A.locals&&_.A.locals},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},a=[],o=0;o<t.length;o++){var c=t[o],l=r.base?c[0]+r.base:c[0],u=s[l]||0,d="".concat(l," ").concat(u);s[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var g=i(p,r);r.byIndex=o,e.splice(o,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var o=n(s[a]);e[o].references--}for(var c=r(t,i),l=0;l<s.length;l++){var u=n(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},156:(t,e,n)=>{n.a(t,(async(t,e)=>{try{n(511);var r=n(148),i=t([r]);r=(i.then?(await i)():i)[0];var s=function(t,e,n,r){return new(n||(n=Promise))((function(i,s){function a(t){try{c(r.next(t))}catch(t){s(t)}}function o(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}c((r=r.apply(t,e||[])).next())}))};function o(){return s(this,void 0,void 0,(function*(){const t=document.querySelector("#game-svg-container"),e=new l(t),n=new u(e.getSVG());t.appendChild(e.getSVG());{let t=r.Uw.new();for(yield e.setSquareStatesFromGameState(t);!t.is_endgame;){const i=t.legal_move_vec();let s;0===i.length?(alert(`${t.current_player} is out of moves`),s=r.rc.pass()):s=yield n.getMove(i),t=t.step(s),yield e.setSquareStatesFromGameState(t)}alert("Game is over!")}}))}const c="http://www.w3.org/2000/svg";var a;!function(t){t[t.Empty=0]="Empty",t[t.Black=1]="Black",t[t.White=2]="White",t[t.BlackLegalMove=3]="BlackLegalMove",t[t.WhiteLegalMove=4]="WhiteLegalMove"}(a||(a={}));class l{constructor(t){this.container=t,this.svg=document.createElementNS(c,"svg"),this.initialize(),this.container.innerHTML="",this.container.appendChild(this.svg)}getSVG(){return this.svg}setSquareStatesFromGameState(t){return s(this,void 0,void 0,(function*(){const e=t.legal_move_vec().map((t=>t.flat_index())),n=t.current_player===r.ai.Black?a.BlackLegalMove:a.WhiteLegalMove;let i=!0;const s=[];for(let o=0;o<8;++o){const c=[];for(let s=0;s<8;++s){let l;switch(t.get_disc(o,s)){case r.ai.Black:l=a.Black;break;case r.ai.White:l=a.White;break;default:{const t=8*o+s;l=e.includes(t)?n:a.Empty}}l!==this.squares[o][s].getState()&&(i=!1),c.push(l)}s.push(c)}if(!i){this.svg.remove();for(let t=0;t<8;++t)for(let e=0;e<8;++e)this.squares[t][e].setState(s[t][e]);this.container.appendChild(this.svg),this.svg.pauseAnimations(),this.svg.setCurrentTime(0),this.svg.unpauseAnimations(),yield new Promise((t=>setTimeout(t,1e3*l.animationDuration)))}}))}static getSquareStateTransitionId(t,e){const n=a[t],r=a[e];return t===e?`square-${n}`:`square-${n}-to-${r}`}initialize(){this.svg.setAttribute("id","game-svg");const t=8*l.squareSize+2*l.marginWidth;this.svg.setAttribute("viewBox",`0 0 ${t} ${t}`),this.svg.innerHTML="",this.createDefs(),this.createBoard(),this.createDiscViews()}createDefs(){const t=document.createElementNS(c,"defs");for(const[e,n,r]of[[l.blackDiscGradientId,"rgb(32, 32, 32)","rgb(24, 24, 24)"],[l.whiteDiscGradientId,"rgb(224, 224, 244)","rgb(168, 168, 168)"]]){const i=document.createElementNS(c,"radialGradient");i.setAttribute("id",e);{const t=document.createElementNS(c,"stop");t.setAttribute("offset","90%"),t.setAttribute("stop-color",n),i.appendChild(t)}{const t=document.createElementNS(c,"stop");t.setAttribute("offset","100%"),t.setAttribute("stop-color",r),i.appendChild(t)}t.appendChild(i)}{const e=document.createElementNS(c,"filter");e.setAttribute("id",l.discShadowFilterId);{const t=document.createElementNS(c,"feDropShadow");t.setAttribute("dx","0"),t.setAttribute("dy","0"),t.setAttribute("stdDeviation","0.3"),t.setAttribute("flood-color","black"),t.setAttribute("flood-opacity","1"),e.appendChild(t)}t.appendChild(e)}for(const e in a){const n=Number(e);if(!isNaN(n))for(const e in a){const r=Number(e);isNaN(r)||n===a.Empty&&r===a.Empty||t.appendChild(l.createSquareStateTransition(n,r))}}this.svg.appendChild(t)}createBoard(){{const t="border-shadow-filter";{const e=document.createElementNS(c,"filter");e.setAttribute("id",t);{const t=document.createElementNS(c,"feDropShadow");t.setAttribute("dx","0"),t.setAttribute("dy","0"),t.setAttribute("stdDeviation","0.7"),t.setAttribute("flood-color","black"),t.setAttribute("flood-opacity","1"),e.appendChild(t)}this.svg.appendChild(e)}const e=document.createElementNS(c,"rect");e.setAttribute("filter",`url('#${t}')`);const n=document.createElementNS(c,"rect");for(const t of[e,n]){{const e=(l.marginWidth-l.borderWidth).toString();t.setAttribute("x",e),t.setAttribute("y",e)}{const e=(8*l.squareSize+2*l.borderWidth).toString();t.setAttribute("width",e),t.setAttribute("height",e)}{const e=l.borderWidth.toString();t.setAttribute("rx",e),t.setAttribute("ry",e)}t.setAttribute("fill","black")}this.svg.appendChild(e),this.svg.appendChild(n)}{const t=document.createElementNS(c,"rect");for(const e of["x","y"])t.setAttribute(e,l.marginWidth.toString());for(const e of["width","height"])t.setAttribute(e,(8*l.squareSize).toString());t.setAttribute("fill",l.boardBackgroundColor),this.svg.appendChild(t)}{const t=document.createElementNS(c,"g");t.setAttribute("stroke","black"),t.setAttribute("stroke-width",l.gridLineWidth.toString());for(let e=0;e<9;++e){const n=l.marginWidth+e*l.squareSize,r=l.marginWidth,i=l.marginWidth+8*l.squareSize;t.appendChild(l.createLine(n,r,n,i)),t.appendChild(l.createLine(r,n,i,n))}this.svg.appendChild(t)}{const t=document.createElementNS(c,"g");t.setAttribute("fill","black");for(const e of[2,6]){const n=l.marginWidth+e*l.squareSize;for(const e of[2,6]){const r=l.marginWidth+e*l.squareSize,i=document.createElementNS(c,"circle");i.setAttribute("cx",n.toString()),i.setAttribute("cy",r.toString()),i.setAttribute("r",l.dotRadius.toString()),t.appendChild(i)}}this.svg.appendChild(t)}}createDiscViews(){this.squares=[];for(let t=0;t<8;++t){const e=[];for(let n=0;n<8;++n){const r=l.marginWidth+(n+.5)*l.squareSize,i=l.marginWidth+(t+.5)*l.squareSize;e.push(new d(this.svg,r,i))}this.squares.push(e)}}static createSquareStateTransition(t,e){const n=document.createElementNS(c,"g");n.setAttribute("id",l.getSquareStateTransitionId(t,e));const r=l.getDiscVisualProps(t,e),i=l.getDiscVisualProps(e,t),s=document.createElementNS(c,"rect");s.setAttribute("fill","black"),s.setAttribute("filter",`url('#${l.discShadowFilterId}')`),n.appendChild(s);const o=document.createElementNS(c,"rect");o.setAttribute("transform","rotate(45, 0, 0)"),n.appendChild(o);const u=document.createElementNS(c,"rect");u.setAttribute("fill",`url('#${l.blackDiscGradientId}')`),n.appendChild(u);const d=document.createElementNS(c,"rect");if(d.setAttribute("fill",`url('#${l.whiteDiscGradientId}')`),n.appendChild(d),!(t!==a.BlackLegalMove&&t!==a.WhiteLegalMove||e!==a.Black&&e!==a.White))for(const t of[s,u,d])t.setAttribute("transform","rotate(45, 0, 0)");if(t===a.Black&&e===a.White||t===a.White&&e===a.Black){const t=document.createElementNS(c,"animateTransform");t.setAttribute("attributeName","transform"),t.setAttribute("attributeType","XML"),t.setAttribute("dur",`${l.animationDuration}s`),t.setAttribute("calcMode","spline"),t.setAttribute("fill","freeze"),t.setAttribute("type","scale"),t.setAttribute("values","1 1; 0.2 1; 1 1"),t.setAttribute("keyTimes","0;0.5;1"),t.setAttribute("keySplines","0.5 0.1 0.9 0.5;0.1 0.5 0.5 0.9");for(const e of[s,u,d])e.appendChild(t.cloneNode())}for(const t of[s,o,u,d]){for(const e of["x","y"])l.addAttributeOrAnimation(t,e,.5*-r.size,.5*-i.size);for(const e of["width","height"])l.addAttributeOrAnimation(t,e,r.size,i.size);for(const e of["rx","ry"])l.addAttributeOrAnimation(t,e,r.cornerRadius,i.cornerRadius)}return l.addAttributeOrAnimation(s,"opacity",r.shadowOpacity,i.shadowOpacity),l.addAttributeOrAnimation(o,"fill",r.legalMoveIndicatorFill,i.legalMoveIndicatorFill),l.addAttributeOrAnimation(o,"fill-opacity",r.legalMoveIndicatorOpacity,i.legalMoveIndicatorOpacity),l.addAttributeOrAnimation(u,"fill-opacity",r.blackDiscOpacity,i.blackDiscOpacity),l.addAttributeOrAnimation(d,"fill-opacity",r.whiteDiscOpacity,i.whiteDiscOpacity),n}static getDiscVisualProps(t,e){if(t===a.Empty&&e===a.Empty)throw new Error("state and counterpart cannot both be empty");let n,r,i,s,o,c,u;if(t===a.Empty){const a=l.getDiscVisualProps(e,t);n=.5*a.size,r=.5*a.cornerRadius,i=0,s=a.legalMoveIndicatorFill,o=0,c=0,u=0}else{switch(t){case a.Black:case a.White:n=2*l.discRadius,r=l.discRadius,i=1,o=0,t===a.Black?(c=1,u=0):(c=0,u=1);break;case a.BlackLegalMove:case a.WhiteLegalMove:n=l.legalMoveSquareSize,r=0,i=0,o=.5,c=0,u=0;break;default:throw new Error("Invalid state")}switch(t){case a.Black:case a.BlackLegalMove:s="black";break;case a.White:case a.WhiteLegalMove:s="white";break;default:throw new Error("Invalid state")}}return{size:n,cornerRadius:r,shadowOpacity:i,legalMoveIndicatorFill:s,legalMoveIndicatorOpacity:o,blackDiscOpacity:c,whiteDiscOpacity:u}}static addAttributeOrAnimation(t,e,n,r){if(n===r)return void t.setAttribute(e,r.toString());const i=document.createElementNS(c,"animate");i.setAttribute("attributeName",e),i.setAttribute("dur",`${l.animationDuration}s`),i.setAttribute("calcMode","spline"),i.setAttribute("fill","freeze"),i.setAttribute("values",`${n};${r}`),i.setAttribute("keyTimes","0;1"),i.setAttribute("keySplines","0.1 0.5 0.5 0.9"),t.appendChild(i)}static createLine(t,e,n,r){const i=document.createElementNS(c,"line");return i.setAttribute("x1",t.toString()),i.setAttribute("y1",e.toString()),i.setAttribute("x2",n.toString()),i.setAttribute("y2",r.toString()),i}}l.squareSize=10,l.marginWidth=3,l.gridLineWidth=.2,l.borderWidth=1,l.dotRadius=.75,l.discRadius=4,l.legalMoveSquareSize=4,l.blackDiscGradientId="black-disc-gradient",l.whiteDiscGradientId="white-disc-gradient",l.discShadowFilterId="disc-shadow-filter",l.boardBackgroundColor="rgb(63, 142, 106)",l.animationDuration=.5;class u{constructor(t){this.svg=t,this.onClick=t=>{if(0===this.legalMoveFlatIndices.length){if(null!==this.resolveActionPromise)throw new Error("No legal move is available but an action promise is set");return}if(null===this.resolveActionPromise)throw new Error("Legal moves are available but no action promise is set");const e=new DOMPoint(t.clientX,t.clientY),n=this.svg.getScreenCTM();if(null===n)throw new Error("Failed to get the screen CTM");const i=e.matrixTransform(n.inverse());let s=(i.y-l.marginWidth)/l.squareSize;if(s<0||s>=8)return;s=Math.floor(s);let a=(i.x-l.marginWidth)/l.squareSize;if(a<0||a>=8)return;a=Math.floor(a);const o=8*s+a;if(!this.legalMoveFlatIndices.includes(o))return;this.legalMoveFlatIndices=[];const c=this.resolveActionPromise;this.resolveActionPromise=null,c(r.rc.from_flat_index(o))},this.svg.addEventListener("click",this.onClick),this.legalMoveFlatIndices=[],this.resolveActionPromise=null}[Symbol.dispose](){this.svg.removeEventListener("click",this.onClick)}getMove(t){if(0===t.length)throw new Error("No legal move is available");return this.legalMoveFlatIndices=t.map((t=>t.flat_index())),new Promise((t=>{this.resolveActionPromise=t}))}}class d{constructor(t,e,n){this.svg=t,this.centerX=e,this.centerY=n,this.state=a.Empty,this.useElement=null}getState(){return this.state}setState(t){if(t===a.Empty&&this.state===a.Empty)return void(null!==this.useElement&&(this.useElement.remove(),this.useElement=null));null===this.useElement&&(this.useElement=document.createElementNS(c,"use"),this.svg.appendChild(this.useElement));const e=l.getSquareStateTransitionId(this.state,t);this.useElement.setAttribute("href",`#${e}`),this.useElement.setAttribute("transform",`translate(${this.centerX}, ${this.centerY})`),this.state=t}}o().catch(console.error),e()}catch(h){e(h)}}))},504:(t,e,n)=>{var r=n(800);t.exports=n.v(e,t.id,"baab4132998f0614f037",{"./othello_rs_bg.js":{__wbg_action_new:r.xv,__wbindgen_throw:r.Qn}})}},s={};function a(t){var e=s[t];if(void 0!==e)return e.exports;var n=s[t]={id:t,loaded:!1,exports:{}};return i[t](n,n.exports,a),n.loaded=!0,n.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var c,l,u,d=new Set,h=i.exports,p=new Promise(((t,e)=>{u=e,l=t}));p[e]=h,p[t]=t=>(o&&t(o),d.forEach(t),p.catch((t=>{}))),i.exports=p,s((i=>{var s;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[t])return i;if(i.then){var s=[];s.d=0,i.then((t=>{a[e]=t,r(s)}),(t=>{a[n]=t,r(s)}));var a={};return a[t]=t=>t(s),a}}var o={};return o[t]=t=>{},o[e]=i,o})))(i);var a=()=>c.map((t=>{if(t[n])throw t[n];return t[e]})),l=new Promise((e=>{(s=()=>e(a)).r=0;var n=t=>t!==o&&!d.has(t)&&(d.add(t),t&&!t.d&&(s.r++,t.push(s)));c.map((e=>e[t](n)))}));return s.r?l:a()}),(t=>(t?u(p[n]=t):l(h),r(o)))),o&&o.d<0&&(o.d=0)},a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var n in e)a.o(e,n)&&!a.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a.v=(t,e,n,r)=>{var i=fetch(a.p+""+n+".module.wasm"),s=()=>i.then((t=>t.arrayBuffer())).then((t=>WebAssembly.instantiate(t,r))).then((e=>Object.assign(t,e.instance.exports)));return i.then((e=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(e,r).then((e=>Object.assign(t,e.instance.exports)),(t=>{if("application/wasm"!==e.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t),s();throw t})):s()))},(()=>{var t;a.g.importScripts&&(t=a.g.location+"");var e=a.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=t})(),a.nc=void 0,a(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFXd0wsRUFBb0JvQyxFQUFFNU4sU0FDckMsSUFBS3NQLEdBQWF0UCxJQUNiQSxFQUFTeVAsZ0JBQ1pILEVBQVl0UCxFQUFTeVAsY0FBY0MsTUFDL0JKLEdBQVcsQ0FDZixJQUFJSyxFQUFVM1AsRUFBUzRQLHFCQUFxQixVQUM1QyxHQUFHRCxFQUFRdmEsT0FFVixJQURBLElBQUlnRyxFQUFJdVUsRUFBUXZhLE9BQVMsRUFDbEJnRyxHQUFLLEtBQU9rVSxJQUFjLGFBQWFPLEtBQUtQLEtBQWFBLEVBQVlLLEVBQVF2VSxLQUFLc1UsR0FFM0YsQ0FJRCxJQUFLSixFQUFXLE1BQU0sSUFBSW5WLE1BQU0seURBQ2hDbVYsRUFBWUEsRUFBVVEsUUFBUSxPQUFRLElBQUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEZ0RSxFQUFvQm1ELEVBQUlXLEMsS0NsQnhCOUQsRUFBb0J1RSxRQUFLOWEsRUNHQ3VXLEVBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vdGhlbGxvL3dlYnBhY2svcnVudGltZS9hc3luYyBtb2R1bGUiLCJ3ZWJwYWNrOi8vb3RoZWxsby8uLi9ydXN0L3BrZy9vdGhlbGxvX3JzLmpzIiwid2VicGFjazovL290aGVsbG8vLi4vcnVzdC9wa2cvb3RoZWxsb19yc19iZy5qcyIsIndlYnBhY2s6Ly9vdGhlbGxvLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9vdGhlbGxvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9vdGhlbGxvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb3RoZWxsby8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9vdGhlbGxvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL290aGVsbG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL290aGVsbG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vb3RoZWxsby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vdGhlbGxvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb3RoZWxsby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL290aGVsbG8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vb3RoZWxsby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vdGhlbGxvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL290aGVsbG8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL290aGVsbG8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9vdGhlbGxvL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vb3RoZWxsby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL290aGVsbG8vd2VicGFjay9ydW50aW1lL3dhc20gbG9hZGluZyIsIndlYnBhY2s6Ly9vdGhlbGxvL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL290aGVsbG8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL290aGVsbG8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWJwYWNrUXVldWVzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBxdWV1ZXNcIikgOiBcIl9fd2VicGFja19xdWV1ZXNfX1wiO1xudmFyIHdlYnBhY2tFeHBvcnRzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBleHBvcnRzXCIpIDogXCJfX3dlYnBhY2tfZXhwb3J0c19fXCI7XG52YXIgd2VicGFja0Vycm9yID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBlcnJvclwiKSA6IFwiX193ZWJwYWNrX2Vycm9yX19cIjtcbnZhciByZXNvbHZlUXVldWUgPSAocXVldWUpID0+IHtcblx0aWYocXVldWUgJiYgcXVldWUuZCA8IDEpIHtcblx0XHRxdWV1ZS5kID0gMTtcblx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSkpO1xuXHRcdHF1ZXVlLmZvckVhY2goKGZuKSA9PiAoZm4uci0tID8gZm4ucisrIDogZm4oKSkpO1xuXHR9XG59XG52YXIgd3JhcERlcHMgPSAoZGVwcykgPT4gKGRlcHMubWFwKChkZXApID0+IHtcblx0aWYoZGVwICE9PSBudWxsICYmIHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpIHtcblx0XHRpZihkZXBbd2VicGFja1F1ZXVlc10pIHJldHVybiBkZXA7XG5cdFx0aWYoZGVwLnRoZW4pIHtcblx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuXHRcdFx0cXVldWUuZCA9IDA7XG5cdFx0XHRkZXAudGhlbigocikgPT4ge1xuXHRcdFx0XHRvYmpbd2VicGFja0V4cG9ydHNdID0gcjtcblx0XHRcdFx0cmVzb2x2ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdH0sIChlKSA9PiB7XG5cdFx0XHRcdG9ialt3ZWJwYWNrRXJyb3JdID0gZTtcblx0XHRcdFx0cmVzb2x2ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdH0pO1xuXHRcdFx0dmFyIG9iaiA9IHt9O1xuXHRcdFx0b2JqW3dlYnBhY2tRdWV1ZXNdID0gKGZuKSA9PiAoZm4ocXVldWUpKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHR9XG5cdHZhciByZXQgPSB7fTtcblx0cmV0W3dlYnBhY2tRdWV1ZXNdID0geCA9PiB7fTtcblx0cmV0W3dlYnBhY2tFeHBvcnRzXSA9IGRlcDtcblx0cmV0dXJuIHJldDtcbn0pKTtcbl9fd2VicGFja19yZXF1aXJlX18uYSA9IChtb2R1bGUsIGJvZHksIGhhc0F3YWl0KSA9PiB7XG5cdHZhciBxdWV1ZTtcblx0aGFzQXdhaXQgJiYgKChxdWV1ZSA9IFtdKS5kID0gLTEpO1xuXHR2YXIgZGVwUXVldWVzID0gbmV3IFNldCgpO1xuXHR2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuXHR2YXIgY3VycmVudERlcHM7XG5cdHZhciBvdXRlclJlc29sdmU7XG5cdHZhciByZWplY3Q7XG5cdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuXHRcdHJlamVjdCA9IHJlajtcblx0XHRvdXRlclJlc29sdmUgPSByZXNvbHZlO1xuXHR9KTtcblx0cHJvbWlzZVt3ZWJwYWNrRXhwb3J0c10gPSBleHBvcnRzO1xuXHRwcm9taXNlW3dlYnBhY2tRdWV1ZXNdID0gKGZuKSA9PiAocXVldWUgJiYgZm4ocXVldWUpLCBkZXBRdWV1ZXMuZm9yRWFjaChmbiksIHByb21pc2VbXCJjYXRjaFwiXSh4ID0+IHt9KSk7XG5cdG1vZHVsZS5leHBvcnRzID0gcHJvbWlzZTtcblx0Ym9keSgoZGVwcykgPT4ge1xuXHRcdGN1cnJlbnREZXBzID0gd3JhcERlcHMoZGVwcyk7XG5cdFx0dmFyIGZuO1xuXHRcdHZhciBnZXRSZXN1bHQgPSAoKSA9PiAoY3VycmVudERlcHMubWFwKChkKSA9PiB7XG5cdFx0XHRpZihkW3dlYnBhY2tFcnJvcl0pIHRocm93IGRbd2VicGFja0Vycm9yXTtcblx0XHRcdHJldHVybiBkW3dlYnBhY2tFeHBvcnRzXTtcblx0XHR9KSlcblx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRmbiA9ICgpID0+IChyZXNvbHZlKGdldFJlc3VsdCkpO1xuXHRcdFx0Zm4uciA9IDA7XG5cdFx0XHR2YXIgZm5RdWV1ZSA9IChxKSA9PiAocSAhPT0gcXVldWUgJiYgIWRlcFF1ZXVlcy5oYXMocSkgJiYgKGRlcFF1ZXVlcy5hZGQocSksIHEgJiYgIXEuZCAmJiAoZm4ucisrLCBxLnB1c2goZm4pKSkpO1xuXHRcdFx0Y3VycmVudERlcHMubWFwKChkZXApID0+IChkZXBbd2VicGFja1F1ZXVlc10oZm5RdWV1ZSkpKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZm4uciA/IHByb21pc2UgOiBnZXRSZXN1bHQoKTtcblx0fSwgKGVycikgPT4gKChlcnIgPyByZWplY3QocHJvbWlzZVt3ZWJwYWNrRXJyb3JdID0gZXJyKSA6IG91dGVyUmVzb2x2ZShleHBvcnRzKSksIHJlc29sdmVRdWV1ZShxdWV1ZSkpKTtcblx0cXVldWUgJiYgcXVldWUuZCA8IDAgJiYgKHF1ZXVlLmQgPSAwKTtcbn07IiwiaW1wb3J0ICogYXMgd2FzbSBmcm9tIFwiLi9vdGhlbGxvX3JzX2JnLndhc21cIjtcbmltcG9ydCB7IF9fd2JnX3NldF93YXNtIH0gZnJvbSBcIi4vb3RoZWxsb19yc19iZy5qc1wiO1xuX193Ymdfc2V0X3dhc20od2FzbSk7XG5leHBvcnQgKiBmcm9tIFwiLi9vdGhlbGxvX3JzX2JnLmpzXCI7XG4iLCJsZXQgd2FzbTtcbmV4cG9ydCBmdW5jdGlvbiBfX3diZ19zZXRfd2FzbSh2YWwpIHtcbiAgICB3YXNtID0gdmFsO1xufVxuXG5cbmNvbnN0IGxUZXh0RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ3VuZGVmaW5lZCcgPyAoMCwgbW9kdWxlLnJlcXVpcmUpKCd1dGlsJykuVGV4dERlY29kZXIgOiBUZXh0RGVjb2RlcjtcblxubGV0IGNhY2hlZFRleHREZWNvZGVyID0gbmV3IGxUZXh0RGVjb2RlcigndXRmLTgnLCB7IGlnbm9yZUJPTTogdHJ1ZSwgZmF0YWw6IHRydWUgfSk7XG5cbmNhY2hlZFRleHREZWNvZGVyLmRlY29kZSgpO1xuXG5sZXQgY2FjaGVkVWludDhNZW1vcnkwID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0VWludDhNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWRVaW50OE1lbW9yeTAgPT09IG51bGwgfHwgY2FjaGVkVWludDhNZW1vcnkwLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FjaGVkVWludDhNZW1vcnkwID0gbmV3IFVpbnQ4QXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZFVpbnQ4TWVtb3J5MDtcbn1cblxuZnVuY3Rpb24gZ2V0U3RyaW5nRnJvbVdhc20wKHB0ciwgbGVuKSB7XG4gICAgcHRyID0gcHRyID4+PiAwO1xuICAgIHJldHVybiBjYWNoZWRUZXh0RGVjb2Rlci5kZWNvZGUoZ2V0VWludDhNZW1vcnkwKCkuc3ViYXJyYXkocHRyLCBwdHIgKyBsZW4pKTtcbn1cblxuY29uc3QgaGVhcCA9IG5ldyBBcnJheSgxMjgpLmZpbGwodW5kZWZpbmVkKTtcblxuaGVhcC5wdXNoKHVuZGVmaW5lZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuXG5sZXQgaGVhcF9uZXh0ID0gaGVhcC5sZW5ndGg7XG5cbmZ1bmN0aW9uIGFkZEhlYXBPYmplY3Qob2JqKSB7XG4gICAgaWYgKGhlYXBfbmV4dCA9PT0gaGVhcC5sZW5ndGgpIGhlYXAucHVzaChoZWFwLmxlbmd0aCArIDEpO1xuICAgIGNvbnN0IGlkeCA9IGhlYXBfbmV4dDtcbiAgICBoZWFwX25leHQgPSBoZWFwW2lkeF07XG5cbiAgICBoZWFwW2lkeF0gPSBvYmo7XG4gICAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydENsYXNzKGluc3RhbmNlLCBrbGFzcykge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2Yga2xhc3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgJHtrbGFzcy5uYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UucHRyO1xufVxuXG5sZXQgY2FjaGVkSW50MzJNZW1vcnkwID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0SW50MzJNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWRJbnQzMk1lbW9yeTAgPT09IG51bGwgfHwgY2FjaGVkSW50MzJNZW1vcnkwLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FjaGVkSW50MzJNZW1vcnkwID0gbmV3IEludDMyQXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEludDMyTWVtb3J5MDtcbn1cblxubGV0IGNhY2hlZFVpbnQzMk1lbW9yeTAgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRVaW50MzJNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWRVaW50MzJNZW1vcnkwID09PSBudWxsIHx8IGNhY2hlZFVpbnQzMk1lbW9yeTAuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjYWNoZWRVaW50MzJNZW1vcnkwID0gbmV3IFVpbnQzMkFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWRVaW50MzJNZW1vcnkwO1xufVxuXG5mdW5jdGlvbiBnZXRPYmplY3QoaWR4KSB7IHJldHVybiBoZWFwW2lkeF07IH1cblxuZnVuY3Rpb24gZHJvcE9iamVjdChpZHgpIHtcbiAgICBpZiAoaWR4IDwgMTMyKSByZXR1cm47XG4gICAgaGVhcFtpZHhdID0gaGVhcF9uZXh0O1xuICAgIGhlYXBfbmV4dCA9IGlkeDtcbn1cblxuZnVuY3Rpb24gdGFrZU9iamVjdChpZHgpIHtcbiAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoaWR4KTtcbiAgICBkcm9wT2JqZWN0KGlkeCk7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZ2V0QXJyYXlKc1ZhbHVlRnJvbVdhc20wKHB0ciwgbGVuKSB7XG4gICAgcHRyID0gcHRyID4+PiAwO1xuICAgIGNvbnN0IG1lbSA9IGdldFVpbnQzMk1lbW9yeTAoKTtcbiAgICBjb25zdCBzbGljZSA9IG1lbS5zdWJhcnJheShwdHIgLyA0LCBwdHIgLyA0ICsgbGVuKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRha2VPYmplY3Qoc2xpY2VbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuKiBBIHBsYXllci5cbiovXG5leHBvcnQgY29uc3QgUGxheWVyID0gT2JqZWN0LmZyZWV6ZSh7XG4vKipcbiogQmxhY2sgbW92ZXMgZmlyc3QuXG4qL1xuQmxhY2s6MCxcIjBcIjpcIkJsYWNrXCIsXG4vKipcbiogV2hpdGUgbW92ZXMgc2Vjb25kLlxuKi9cbldoaXRlOjEsXCIxXCI6XCJXaGl0ZVwiLCB9KTtcblxuY29uc3QgQWN0aW9uRmluYWxpemF0aW9uID0gKHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgPyB7IHJlZ2lzdGVyOiAoKSA9PiB7fSwgdW5yZWdpc3RlcjogKCkgPT4ge30gfVxuICAgIDogbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KHB0ciA9PiB3YXNtLl9fd2JnX2FjdGlvbl9mcmVlKHB0ciA+Pj4gMCkpO1xuLyoqXG4qIEFuIGFjdGlvbiB0byBtYWtlIGEgbW92ZSBvciBwYXNzIGEgdHVybi5cbiovXG5leHBvcnQgY2xhc3MgQWN0aW9uIHtcblxuICAgIHN0YXRpYyBfX3dyYXAocHRyKSB7XG4gICAgICAgIHB0ciA9IHB0ciA+Pj4gMDtcbiAgICAgICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShBY3Rpb24ucHJvdG90eXBlKTtcbiAgICAgICAgb2JqLl9fd2JnX3B0ciA9IHB0cjtcbiAgICAgICAgQWN0aW9uRmluYWxpemF0aW9uLnJlZ2lzdGVyKG9iaiwgb2JqLl9fd2JnX3B0ciwgb2JqKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBfX2Rlc3Ryb3lfaW50b19yYXcoKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuX193YmdfcHRyO1xuICAgICAgICB0aGlzLl9fd2JnX3B0ciA9IDA7XG4gICAgICAgIEFjdGlvbkZpbmFsaXphdGlvbi51bnJlZ2lzdGVyKHRoaXMpO1xuICAgICAgICByZXR1cm4gcHRyO1xuICAgIH1cblxuICAgIGZyZWUoKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuX19kZXN0cm95X2ludG9fcmF3KCk7XG4gICAgICAgIHdhc20uX193YmdfYWN0aW9uX2ZyZWUocHRyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBJZiB0aGUgcGxheWVyIHJ1bnMgb3V0IG9mIG1vdmVzLCB0aGUgYml0bWFzayBpcyAwLiBPdGhlcndpc2UsIHRoZSBiaXRtYXNrIGhhcyBleGFjdGx5IG9uZVxuICAgICogYml0IHNldCwgY29ycmVzcG9uZGluZyB0byB0aGUgc3F1YXJlIHdoZXJlIHRoZSBwbGF5ZXIgcGxhY2VzIGEgZGlzYy5cbiAgICAqIEByZXR1cm5zIHtiaWdpbnR9XG4gICAgKi9cbiAgICBnZXQgbWFzaygpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5fX3diZ19nZXRfYWN0aW9uX21hc2sodGhpcy5fX3diZ19wdHIpO1xuICAgICAgICByZXR1cm4gQmlnSW50LmFzVWludE4oNjQsIHJldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogSWYgdGhlIHBsYXllciBydW5zIG91dCBvZiBtb3ZlcywgdGhlIGJpdG1hc2sgaXMgMC4gT3RoZXJ3aXNlLCB0aGUgYml0bWFzayBoYXMgZXhhY3RseSBvbmVcbiAgICAqIGJpdCBzZXQsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNxdWFyZSB3aGVyZSB0aGUgcGxheWVyIHBsYWNlcyBhIGRpc2MuXG4gICAgKiBAcGFyYW0ge2JpZ2ludH0gYXJnMFxuICAgICovXG4gICAgc2V0IG1hc2soYXJnMCkge1xuICAgICAgICB3YXNtLl9fd2JnX3NldF9hY3Rpb25fbWFzayh0aGlzLl9fd2JnX3B0ciwgYXJnMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBhbiBhY3Rpb24gZnJvbSBhIGJpdG1hc2suXG4gICAgKiBAcGFyYW0ge2JpZ2ludH0gbWFza1xuICAgICogQHJldHVybnMge0FjdGlvbn1cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tX21hc2sobWFzaykge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLmFjdGlvbl9mcm9tX21hc2sobWFzayk7XG4gICAgICAgIHJldHVybiBBY3Rpb24uX193cmFwKHJldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBhIHBhc3MgYWN0aW9uLlxuICAgICogQHJldHVybnMge0FjdGlvbn1cbiAgICAqL1xuICAgIHN0YXRpYyBwYXNzKCkge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLmFjdGlvbl9wYXNzKCk7XG4gICAgICAgIHJldHVybiBBY3Rpb24uX193cmFwKHJldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBhIG1vdmUgYWN0aW9uIGZyb20gYSBmbGF0IGluZGV4LlxuICAgICogQHBhcmFtIHtudW1iZXJ9IGZsYXRfaW5kZXhcbiAgICAqIEByZXR1cm5zIHtBY3Rpb259XG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbV9mbGF0X2luZGV4KGZsYXRfaW5kZXgpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5hY3Rpb25fZnJvbV9mbGF0X2luZGV4KGZsYXRfaW5kZXgpO1xuICAgICAgICByZXR1cm4gQWN0aW9uLl9fd3JhcChyZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgYSBtb3ZlIGFjdGlvbiBmcm9tIGEgcm93IGFuZCBhIGNvbHVtbi5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5cbiAgICAqIEByZXR1cm5zIHtBY3Rpb259XG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbV9yb3dfY29sdW1uKHJvdywgY29sdW1uKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20uYWN0aW9uX2Zyb21fcm93X2NvbHVtbihyb3csIGNvbHVtbik7XG4gICAgICAgIHJldHVybiBBY3Rpb24uX193cmFwKHJldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBhY3Rpb24gaXMgYSBwYXNzLlxuICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgKi9cbiAgICBpc19wYXNzKCkge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLmFjdGlvbl9pc19wYXNzKHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgcmV0dXJuIHJldCAhPT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBmbGF0IGluZGV4IG9mIHRoZSBzcXVhcmUgd2hlcmUgdGhlIHBsYXllciBwbGFjZXMgYSBkaXNjLCBvciA2NCBpZiB0aGUgcGxheWVyXG4gICAgKiBwYXNzZXMgdGhlaXIgdHVybi5cbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBmbGF0X2luZGV4KCkge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLmFjdGlvbl9mbGF0X2luZGV4KHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgcmV0dXJuIHJldCA+Pj4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSByb3cgb2YgdGhlIHNxdWFyZSB3aGVyZSB0aGUgcGxheWVyIHBsYWNlcyBhIGRpc2MsIG9yIDggaWYgdGhlIHBsYXllciBwYXNzZXNcbiAgICAqIHRoZWlyIHR1cm4uXG4gICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICovXG4gICAgcm93KCkge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLmFjdGlvbl9yb3codGhpcy5fX3diZ19wdHIpO1xuICAgICAgICByZXR1cm4gcmV0ID4+PiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIGNvbHVtbiBvZiB0aGUgc3F1YXJlIHdoZXJlIHRoZSBwbGF5ZXIgcGxhY2VzIGEgZGlzYywgb3IgOCBpZiB0aGUgcGxheWVyIHBhc3Nlc1xuICAgICogdGhlaXIgdHVybi5cbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBjb2x1bW4oKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20uYWN0aW9uX2NvbHVtbih0aGlzLl9fd2JnX3B0cik7XG4gICAgICAgIHJldHVybiByZXQgPj4+IDA7XG4gICAgfVxufVxuXG5jb25zdCBTdGF0ZUZpbmFsaXphdGlvbiA9ICh0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnKVxuICAgID8geyByZWdpc3RlcjogKCkgPT4ge30sIHVucmVnaXN0ZXI6ICgpID0+IHt9IH1cbiAgICA6IG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeShwdHIgPT4gd2FzbS5fX3diZ19zdGF0ZV9mcmVlKHB0ciA+Pj4gMCkpO1xuLyoqXG4qIFRoZSBzdGF0ZSBvZiB0aGUgZ2FtZS5cbiovXG5leHBvcnQgY2xhc3MgU3RhdGUge1xuXG4gICAgc3RhdGljIF9fd3JhcChwdHIpIHtcbiAgICAgICAgcHRyID0gcHRyID4+PiAwO1xuICAgICAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKFN0YXRlLnByb3RvdHlwZSk7XG4gICAgICAgIG9iai5fX3diZ19wdHIgPSBwdHI7XG4gICAgICAgIFN0YXRlRmluYWxpemF0aW9uLnJlZ2lzdGVyKG9iaiwgb2JqLl9fd2JnX3B0ciwgb2JqKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBfX2Rlc3Ryb3lfaW50b19yYXcoKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuX193YmdfcHRyO1xuICAgICAgICB0aGlzLl9fd2JnX3B0ciA9IDA7XG4gICAgICAgIFN0YXRlRmluYWxpemF0aW9uLnVucmVnaXN0ZXIodGhpcyk7XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuXG4gICAgZnJlZSgpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5fX2Rlc3Ryb3lfaW50b19yYXcoKTtcbiAgICAgICAgd2FzbS5fX3diZ19zdGF0ZV9mcmVlKHB0cik7XG4gICAgfVxuICAgIC8qKlxuICAgICogVGhlIHBsYXllciB3aG8gbW92ZXMgbmV4dC5cbiAgICAqIEByZXR1cm5zIHtQbGF5ZXJ9XG4gICAgKi9cbiAgICBnZXQgY3VycmVudF9wbGF5ZXIoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20uX193YmdfZ2V0X3N0YXRlX2N1cnJlbnRfcGxheWVyKHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBUaGUgcGxheWVyIHdobyBtb3ZlcyBuZXh0LlxuICAgICogQHBhcmFtIHtQbGF5ZXJ9IGFyZzBcbiAgICAqL1xuICAgIHNldCBjdXJyZW50X3BsYXllcihhcmcwKSB7XG4gICAgICAgIHdhc20uX193Ymdfc2V0X3N0YXRlX2N1cnJlbnRfcGxheWVyKHRoaXMuX193YmdfcHRyLCBhcmcwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBEaXNjcyBvZiB0aGUgY3VycmVudCBwbGF5ZXIgb24gdGhlIGJvYXJkLlxuICAgICogQHJldHVybnMge2JpZ2ludH1cbiAgICAqL1xuICAgIGdldCBwbGF5ZXJfZGlzY3MoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20uX193YmdfZ2V0X2FjdGlvbl9tYXNrKHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgcmV0dXJuIEJpZ0ludC5hc1VpbnROKDY0LCByZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIERpc2NzIG9mIHRoZSBjdXJyZW50IHBsYXllciBvbiB0aGUgYm9hcmQuXG4gICAgKiBAcGFyYW0ge2JpZ2ludH0gYXJnMFxuICAgICovXG4gICAgc2V0IHBsYXllcl9kaXNjcyhhcmcwKSB7XG4gICAgICAgIHdhc20uX193Ymdfc2V0X2FjdGlvbl9tYXNrKHRoaXMuX193YmdfcHRyLCBhcmcwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBEaXNjcyBvZiB0aGUgb3Bwb25lbnQgb24gdGhlIGJvYXJkLlxuICAgICogQHJldHVybnMge2JpZ2ludH1cbiAgICAqL1xuICAgIGdldCBvcHBvbmVudF9kaXNjcygpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5fX3diZ19nZXRfc3RhdGVfb3Bwb25lbnRfZGlzY3ModGhpcy5fX3diZ19wdHIpO1xuICAgICAgICByZXR1cm4gQmlnSW50LmFzVWludE4oNjQsIHJldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogRGlzY3Mgb2YgdGhlIG9wcG9uZW50IG9uIHRoZSBib2FyZC5cbiAgICAqIEBwYXJhbSB7YmlnaW50fSBhcmcwXG4gICAgKi9cbiAgICBzZXQgb3Bwb25lbnRfZGlzY3MoYXJnMCkge1xuICAgICAgICB3YXNtLl9fd2JnX3NldF9zdGF0ZV9vcHBvbmVudF9kaXNjcyh0aGlzLl9fd2JnX3B0ciwgYXJnMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogU3F1YXJlcyB3aGVyZSB0aGUgY3VycmVudCBwbGF5ZXIgY2FuIHBsYWNlIGEgZGlzYy5cbiAgICAqIEByZXR1cm5zIHtiaWdpbnR9XG4gICAgKi9cbiAgICBnZXQgbGVnYWxfbW92ZXMoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20uX193YmdfZ2V0X3N0YXRlX2xlZ2FsX21vdmVzKHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgcmV0dXJuIEJpZ0ludC5hc1VpbnROKDY0LCByZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFNxdWFyZXMgd2hlcmUgdGhlIGN1cnJlbnQgcGxheWVyIGNhbiBwbGFjZSBhIGRpc2MuXG4gICAgKiBAcGFyYW0ge2JpZ2ludH0gYXJnMFxuICAgICovXG4gICAgc2V0IGxlZ2FsX21vdmVzKGFyZzApIHtcbiAgICAgICAgd2FzbS5fX3diZ19zZXRfc3RhdGVfbGVnYWxfbW92ZXModGhpcy5fX3diZ19wdHIsIGFyZzApO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFdoZXRoZXIgdGhlIHByZXZpb3VzIHBsYXllciBwYXNzZWQgdGhlaXIgdHVybi5cbiAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICovXG4gICAgZ2V0IHdhc19wYXNzKCkge1xuICAgICAgICBjb25zdCByZXQgPSB3YXNtLl9fd2JnX2dldF9zdGF0ZV93YXNfcGFzcyh0aGlzLl9fd2JnX3B0cik7XG4gICAgICAgIHJldHVybiByZXQgIT09IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICogV2hldGhlciB0aGUgcHJldmlvdXMgcGxheWVyIHBhc3NlZCB0aGVpciB0dXJuLlxuICAgICogQHBhcmFtIHtib29sZWFufSBhcmcwXG4gICAgKi9cbiAgICBzZXQgd2FzX3Bhc3MoYXJnMCkge1xuICAgICAgICB3YXNtLl9fd2JnX3NldF9zdGF0ZV93YXNfcGFzcyh0aGlzLl9fd2JnX3B0ciwgYXJnMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogV2hldGhlciB0aGUgY3VycmVudCBwb3NpdGlvbiBpcyBhbiBlbmRnYW1lLlxuICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXQgaXNfZW5kZ2FtZSgpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5fX3diZ19nZXRfc3RhdGVfaXNfZW5kZ2FtZSh0aGlzLl9fd2JnX3B0cik7XG4gICAgICAgIHJldHVybiByZXQgIT09IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICogV2hldGhlciB0aGUgY3VycmVudCBwb3NpdGlvbiBpcyBhbiBlbmRnYW1lLlxuICAgICogQHBhcmFtIHtib29sZWFufSBhcmcwXG4gICAgKi9cbiAgICBzZXQgaXNfZW5kZ2FtZShhcmcwKSB7XG4gICAgICAgIHdhc20uX193Ymdfc2V0X3N0YXRlX2lzX2VuZGdhbWUodGhpcy5fX3diZ19wdHIsIGFyZzApO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIGluaXRpYWwgc3RhdGUgd2hlbiBhIGdhbWUgYmVnaW5zLlxuICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICovXG4gICAgc3RhdGljIG5ldygpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5zdGF0ZV9uZXcoKTtcbiAgICAgICAgcmV0dXJuIFN0YXRlLl9fd3JhcChyZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgYW4gdXBkYXRlZCBzdGF0ZSBhZnRlciB0aGUgY3VycmVudCBwbGF5ZXIgbWFrZXMgYSBtb3ZlIG9yIHBhc3NlcyB0aGVpciB0dXJuLlxuICAgICpcbiAgICAqIFtSZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gaW4gUGd4XShodHRwczovL2dpdGh1Yi5jb20vc290ZXRzdWsvcGd4L2Jsb2IvZGEyOWU3ZTdlNmFhMGRhZmM0OTQzODEwZjBlZTc2YTI1ZWU3MGNiMy9wZ3gvb3RoZWxsby5weSkuXG4gICAgKiBAcGFyYW0ge0FjdGlvbn0gYWN0aW9uXG4gICAgKiBAcmV0dXJucyB7U3RhdGV9XG4gICAgKi9cbiAgICBzdGVwKGFjdGlvbikge1xuICAgICAgICBfYXNzZXJ0Q2xhc3MoYWN0aW9uLCBBY3Rpb24pO1xuICAgICAgICB2YXIgcHRyMCA9IGFjdGlvbi5fX2Rlc3Ryb3lfaW50b19yYXcoKTtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5zdGF0ZV9zdGVwKHRoaXMuX193YmdfcHRyLCBwdHIwKTtcbiAgICAgICAgcmV0dXJuIFN0YXRlLl9fd3JhcChyZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgYSB2ZWN0b3Igb2YgdGhlIGxlZ2FsIG1vdmVzLlxuICAgICogQHJldHVybnMgeyhBY3Rpb24pW119XG4gICAgKi9cbiAgICBsZWdhbF9tb3ZlX3ZlYygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJldHB0ciA9IHdhc20uX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcigtMTYpO1xuICAgICAgICAgICAgd2FzbS5zdGF0ZV9sZWdhbF9tb3ZlX3ZlYyhyZXRwdHIsIHRoaXMuX193YmdfcHRyKTtcbiAgICAgICAgICAgIHZhciByMCA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAwXTtcbiAgICAgICAgICAgIHZhciByMSA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgICAgIHZhciB2MSA9IGdldEFycmF5SnNWYWx1ZUZyb21XYXNtMChyMCwgcjEpLnNsaWNlKCk7XG4gICAgICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZnJlZShyMCwgcjEgKiA0LCA0KTtcbiAgICAgICAgICAgIHJldHVybiB2MTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHdhc20uX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcigxNik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBkaXNjIGF0IHRoZSBzcXVhcmUgc3BlY2lmaWVkIGJ5IHRoZSByb3cgYW5kIHRoZSBjb2x1bW4sIG9yIE5vbmUgaWYgdGhlIHNxdWFyZVxuICAgICogaXMgZW1wdHkuXG4gICAgKiBAcGFyYW0ge251bWJlcn0gcm93XG4gICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uXG4gICAgKiBAcmV0dXJucyB7UGxheWVyIHwgdW5kZWZpbmVkfVxuICAgICovXG4gICAgZ2V0X2Rpc2Mocm93LCBjb2x1bW4pIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2FzbS5zdGF0ZV9nZXRfZGlzYyh0aGlzLl9fd2JnX3B0ciwgcm93LCBjb2x1bW4pO1xuICAgICAgICByZXR1cm4gcmV0ID09PSAyID8gdW5kZWZpbmVkIDogcmV0O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fd2JnX2FjdGlvbl9uZXcoYXJnMCkge1xuICAgIGNvbnN0IHJldCA9IEFjdGlvbi5fX3dyYXAoYXJnMCk7XG4gICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3diaW5kZ2VuX3Rocm93KGFyZzAsIGFyZzEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0U3RyaW5nRnJvbVdhc20wKGFyZzAsIGFyZzEpKTtcbn07XG5cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBodG1sIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzQsIDM0LCAzNCk7XG59XG5cbmJvZHkge1xuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMDtcblxuICAvKiBTZXQgdGhlIGJvZHkgdG8gYmUgYSBmbGV4IGNvbnRhaW5lci4gKi9cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG59XG5cbiNnYW1lLWNvbnRyb2xzLWNvbnRhaW5lciB7XG4gIC8qIEZpeGVkIDQ4cHggaGVpZ2h0LiAqL1xuICBmbGV4OiAwIDEgNDhweDtcbn1cblxuI2dhbWUtc3ZnLWNvbnRhaW5lciB7XG4gIC8qIE9jY3VweSB0aGUgcmVtYWluaW5nIHNwYWNlIGxlZnQgYnkgdGhlIGdhbWUgY29udHJvbHMuICovXG4gIGZsZXg6IDEgMSAwcHg7XG5cbiAgY29udGFpbmVyOiBnYW1lLXN2Zy1jb250YWluZXItbGF5b3V0IC8gc2l6ZTtcblxuICAvKiBTZXQgcG9zaXRpb24gdG8gcmVsYXRpdmUgdG8gbWFrZSB0aGUgY29udGFpbmVyIGJlIHRoZSBTVkcncyBjb250YWluaW5nIGJsb2NrLlxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9jayAqL1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbiNnYW1lLXN2ZyB7XG4gIC8qIE1haW50YWluIHRoZSBhc3BlY3QgcmF0aW8gb2YgYW4gU1ZHIGluIGEgY29udGFpbmVyLlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjY3ODY3NzQgKi9cbiAgYXNwZWN0LXJhdGlvOiAxLzE7XG5cbiAgLyogT2NjdXB5IHRoZSBlbnRpcmUgd2lkdGggaWYgd2lkdGggPD0gaGVpZ2h0LiAqL1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuXG4gIC8qIENlbnRlciB0aGUgU1ZHIGhvcml6b250YWxseSBhbmQgdmVydGljYWxseS5cbiAgICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIzNzAzNjU1ICovXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgLyogUmVsYXRpdmUgdG8gdGhlIHRyYW5zZm9ybWVkIGVsZW1lbnQncyBvd24gYm91bmRpbmcgYm94LiAqL1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbn1cblxuLyogT2NjdXB5IHRoZSBlbnRpcmUgaGVpZ2h0IGlmIHdpZHRoID4gaGVpZ2h0LiAqL1xuQGNvbnRhaW5lciBnYW1lLXN2Zy1jb250YWluZXItbGF5b3V0IChhc3BlY3QtcmF0aW8gPiAxLzEpIHtcbiAgI2dhbWUtc3ZnIHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbn1cblxuLyogUHJldmVudCB1c2VycyBmcm9tIGFjY2lkZW50YWxseSBzZWxlY3QgdGhlIHRleHRzLiAqL1xuI2dhbWUtc3ZnIHRleHQge1xuICAvKiB1c2VyLXNlbGVjdCBkb2VzIG5vdCB3b3JrIG9uIFNWRyB0ZXh0cyBpbiBTYWZhcmkuICovXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLFlBQVk7RUFDWixTQUFTOztFQUVULHlDQUF5QztFQUN6QyxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsMERBQTBEO0VBQzFELGFBQWE7O0VBRWIsMkNBQTJDOztFQUUzQzt5R0FDdUc7RUFDdkcsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0U7MkNBQ3lDO0VBQ3pDLGlCQUFpQjs7RUFFakIsZ0RBQWdEO0VBQ2hELFdBQVc7RUFDWCxZQUFZOztFQUVaOzJDQUN5QztFQUN6QyxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCw0REFBNEQ7RUFDNUQsZ0NBQWdDO0FBQ2xDOztBQUVBLGdEQUFnRDtBQUNoRDtFQUNFO0lBQ0UsV0FBVztJQUNYLFlBQVk7RUFDZDtBQUNGOztBQUVBLHNEQUFzRDtBQUN0RDtFQUNFLHNEQUFzRDtFQUN0RCx5QkFBeUI7RUFDekIsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDM0LCAzNCwgMzQpO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG5cXG4gIC8qIFNldCB0aGUgYm9keSB0byBiZSBhIGZsZXggY29udGFpbmVyLiAqL1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG59XFxuXFxuI2dhbWUtY29udHJvbHMtY29udGFpbmVyIHtcXG4gIC8qIEZpeGVkIDQ4cHggaGVpZ2h0LiAqL1xcbiAgZmxleDogMCAxIDQ4cHg7XFxufVxcblxcbiNnYW1lLXN2Zy1jb250YWluZXIge1xcbiAgLyogT2NjdXB5IHRoZSByZW1haW5pbmcgc3BhY2UgbGVmdCBieSB0aGUgZ2FtZSBjb250cm9scy4gKi9cXG4gIGZsZXg6IDEgMSAwcHg7XFxuXFxuICBjb250YWluZXI6IGdhbWUtc3ZnLWNvbnRhaW5lci1sYXlvdXQgLyBzaXplO1xcblxcbiAgLyogU2V0IHBvc2l0aW9uIHRvIHJlbGF0aXZlIHRvIG1ha2UgdGhlIGNvbnRhaW5lciBiZSB0aGUgU1ZHJ3MgY29udGFpbmluZyBibG9jay5cXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrICovXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbiNnYW1lLXN2ZyB7XFxuICAvKiBNYWludGFpbiB0aGUgYXNwZWN0IHJhdGlvIG9mIGFuIFNWRyBpbiBhIGNvbnRhaW5lci5cXG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82Njc4Njc3NCAqL1xcbiAgYXNwZWN0LXJhdGlvOiAxLzE7XFxuXFxuICAvKiBPY2N1cHkgdGhlIGVudGlyZSB3aWR0aCBpZiB3aWR0aCA8PSBoZWlnaHQuICovXFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogYXV0bztcXG5cXG4gIC8qIENlbnRlciB0aGUgU1ZHIGhvcml6b250YWxseSBhbmQgdmVydGljYWxseS5cXG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMzcwMzY1NSAqL1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICAvKiBSZWxhdGl2ZSB0byB0aGUgdHJhbnNmb3JtZWQgZWxlbWVudCdzIG93biBib3VuZGluZyBib3guICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG59XFxuXFxuLyogT2NjdXB5IHRoZSBlbnRpcmUgaGVpZ2h0IGlmIHdpZHRoID4gaGVpZ2h0LiAqL1xcbkBjb250YWluZXIgZ2FtZS1zdmctY29udGFpbmVyLWxheW91dCAoYXNwZWN0LXJhdGlvID4gMS8xKSB7XFxuICAjZ2FtZS1zdmcge1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgfVxcbn1cXG5cXG4vKiBQcmV2ZW50IHVzZXJzIGZyb20gYWNjaWRlbnRhbGx5IHNlbGVjdCB0aGUgdGV4dHMuICovXFxuI2dhbWUtc3ZnIHRleHQge1xcbiAgLyogdXNlci1zZWxlY3QgZG9lcyBub3Qgd29yayBvbiBTVkcgdGV4dHMgaW4gU2FmYXJpLiAqL1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgeyBBY3Rpb24sIFBsYXllciwgU3RhdGUgYXMgR2FtZVN0YXRlIH0gZnJvbSAnb3RoZWxsb19ycyc7XG4vKipcbiAqIFRoZSBtYWluIGVudHJ5IHBvaW50IG9mIHRoZSB3ZWIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3Qgc3ZnQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhbWUtc3ZnLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBnYW1lVmlldyA9IG5ldyBHYW1lVmlldyhzdmdDb250YWluZXIpO1xuICAgICAgICBjb25zdCBjbGlja0hhbmRsZXIgPSBuZXcgU1ZHQ2xpY2tIYW5kbGVyKGdhbWVWaWV3LmdldFNWRygpKTtcbiAgICAgICAgc3ZnQ29udGFpbmVyLmFwcGVuZENoaWxkKGdhbWVWaWV3LmdldFNWRygpKTtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETzogYWRkIG1vcmUgY29udHJvbHMuXG4gICAgICAgICAgICBsZXQgZ2FtZVN0YXRlID0gR2FtZVN0YXRlLm5ldygpO1xuICAgICAgICAgICAgeWllbGQgZ2FtZVZpZXcuc2V0U3F1YXJlU3RhdGVzRnJvbUdhbWVTdGF0ZShnYW1lU3RhdGUpO1xuICAgICAgICAgICAgd2hpbGUgKCFnYW1lU3RhdGUuaXNfZW5kZ2FtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlZ2FsTW92ZXMgPSBnYW1lU3RhdGUubGVnYWxfbW92ZV92ZWMoKTtcbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChsZWdhbE1vdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChgJHtnYW1lU3RhdGUuY3VycmVudF9wbGF5ZXJ9IGlzIG91dCBvZiBtb3Zlc2ApO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBBY3Rpb24ucGFzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0geWllbGQgY2xpY2tIYW5kbGVyLmdldE1vdmUobGVnYWxNb3Zlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZSA9IGdhbWVTdGF0ZS5zdGVwKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgeWllbGQgZ2FtZVZpZXcuc2V0U3F1YXJlU3RhdGVzRnJvbUdhbWVTdGF0ZShnYW1lU3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxlcnQoJ0dhbWUgaXMgb3ZlciEnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuY29uc3QgU1ZHX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4vKipcbiAqIFRoZSBzdGF0ZSBvZiBhIHNxdWFyZSBvbiB0aGUgYm9hcmQsIHVzZWQgdG8gZGV0ZXJtaW5lIGhvdyB0byByZW5kZXIgdGhlIHNxdWFyZS5cbiAqL1xudmFyIFNxdWFyZVN0YXRlO1xuKGZ1bmN0aW9uIChTcXVhcmVTdGF0ZSkge1xuICAgIFNxdWFyZVN0YXRlW1NxdWFyZVN0YXRlW1wiRW1wdHlcIl0gPSAwXSA9IFwiRW1wdHlcIjtcbiAgICBTcXVhcmVTdGF0ZVtTcXVhcmVTdGF0ZVtcIkJsYWNrXCJdID0gMV0gPSBcIkJsYWNrXCI7XG4gICAgU3F1YXJlU3RhdGVbU3F1YXJlU3RhdGVbXCJXaGl0ZVwiXSA9IDJdID0gXCJXaGl0ZVwiO1xuICAgIFNxdWFyZVN0YXRlW1NxdWFyZVN0YXRlW1wiQmxhY2tMZWdhbE1vdmVcIl0gPSAzXSA9IFwiQmxhY2tMZWdhbE1vdmVcIjtcbiAgICBTcXVhcmVTdGF0ZVtTcXVhcmVTdGF0ZVtcIldoaXRlTGVnYWxNb3ZlXCJdID0gNF0gPSBcIldoaXRlTGVnYWxNb3ZlXCI7XG59KShTcXVhcmVTdGF0ZSB8fCAoU3F1YXJlU3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBBIHZpZXcgdGhhdCBjcmVhdGVzIGFuIFNWRyBlbGVtZW50IHRvIGRpc3BsYXkgYSBib2FyZCB0aGF0IHRyYW5zaXRpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0YXRlcy5cbiAqL1xuY2xhc3MgR2FtZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5zdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ3N2ZycpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuc3ZnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgU1ZHIGVsZW1lbnQgY3JlYXRlZCBieSB0aGlzIHZpZXcuXG4gICAgICovXG4gICAgZ2V0U1ZHKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHNxdWFyZSBzdGF0ZXMgYmFzZWQgb24gdGhlIGdpdmVuIGdhbWUgc3RhdGUuXG4gICAgICovXG4gICAgc2V0U3F1YXJlU3RhdGVzRnJvbUdhbWVTdGF0ZShnYW1lU3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2FsTW92ZUZsYXRJbmRpY2VzID0gZ2FtZVN0YXRlLmxlZ2FsX21vdmVfdmVjKCkubWFwKG1vdmUgPT4gbW92ZS5mbGF0X2luZGV4KCkpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFBsYXllckxlZ2FsTW92ZVN0YXRlID0gZ2FtZVN0YXRlLmN1cnJlbnRfcGxheWVyID09PSBQbGF5ZXIuQmxhY2sgP1xuICAgICAgICAgICAgICAgIFNxdWFyZVN0YXRlLkJsYWNrTGVnYWxNb3ZlIDogU3F1YXJlU3RhdGUuV2hpdGVMZWdhbE1vdmU7XG4gICAgICAgICAgICBsZXQgaXNTYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHNxdWFyZVN0YXRlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3F1YXJlU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZ2FtZVN0YXRlLmdldF9kaXNjKGksIGopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBsYXllci5CbGFjazpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVTdGF0ZSA9IFNxdWFyZVN0YXRlLkJsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQbGF5ZXIuV2hpdGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlU3RhdGUgPSBTcXVhcmVTdGF0ZS5XaGl0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IC8vIFJ1c3QncyB3YXNtLWJpbmRnZW4gdXNlcyBgdW5kZWZpbmVkYCBmb3IgT3B0aW9uPFQ+OjpOb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhdEluZGV4ID0gaSAqIDggKyBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVTdGF0ZSA9IGxlZ2FsTW92ZUZsYXRJbmRpY2VzLmluY2x1ZGVzKGZsYXRJbmRleCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBsYXllckxlZ2FsTW92ZVN0YXRlIDogU3F1YXJlU3RhdGUuRW1wdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcXVhcmVTdGF0ZSAhPT0gdGhpcy5zcXVhcmVzW2ldW2pdLmdldFN0YXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2FtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKHNxdWFyZVN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3F1YXJlU3RhdGVzLnB1c2gocm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vLyBEb24ndCB1cGRhdGUgdGhlIHZpZXcgaWYgdGhlIGRpc2Mgdmlld3MgZG8gbm90IGNoYW5nZSB0aGVpciBzdGF0ZXMuXG4gICAgICAgICAgICBpZiAoaXNTYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm90IHN1cmUgd2h5IHRoaXMgd29ya3MsIGJ1dCByZW1vdmluZyBhbmQgcmUtYWRkaW5nIHRoZSBTVkcgZWxlbWVudCBmaXhlcyB0d28gYW5pbWF0aW9uXG4gICAgICAgICAgICAvLyBpc3N1ZXMgaW4gU2FmYXJpLlxuICAgICAgICAgICAgLy8gLSBhbmltYXRlVHJhbnNmb3JtIGRpZCBub3Qgd29yay5cbiAgICAgICAgICAgIC8vIC0gQWxsIGFuaW1hdGlvbnMgZmFpbGVkIG9uY2UgdGhlIHNjcmVlbiB3YXMgaGlkZGVuIGFuZCB0aGVuIHJlc3VtZWQuXG4gICAgICAgICAgICB0aGlzLnN2Zy5yZW1vdmUoKTtcbiAgICAgICAgICAgIC8vLyBVcGRhdGUgdGhlIGRpc2Mgdmlld3Mgd2l0aCBhbmltYXRpb25zLlxuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgODsgKytyb3cpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCA4OyArK2NvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNxdWFyZXNbcm93XVtjb2x1bW5dLnNldFN0YXRlKHNxdWFyZVN0YXRlc1tyb3ddW2NvbHVtbl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlLWFkZCB0aGUgU1ZHIGVsZW1lbnQuIE5vIG5lZWQgdG8gaW5zZXJ0IGEgd2FpdFRpbWVvdXQoKSBoZXJlLCBhbmQgdGhlIHNjcmVlbiB3b3VsZCBmbGFzaFxuICAgICAgICAgICAgLy8gaW4gQ2hyb21lIGlmIHdlIGRvLlxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5zdmcpO1xuICAgICAgICAgICAgLy8gUmVzdGFydCB0aGUgYW5pbWF0aW9ucy4gQW5pbWF0aW9ucyB3b3VsZCBmYWlsIGluIFNhZmFyaSBpZiB0aGUgYW5pbWF0aW9ucyBhcmUgbm90IHBhdXNlZFxuICAgICAgICAgICAgLy8gYmVmb3JlIHNldHRpbmcgdGhlIGN1cnJlbnQgdGltZS5cbiAgICAgICAgICAgIHRoaXMuc3ZnLnBhdXNlQW5pbWF0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5zdmcuc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgICAgICAgICB0aGlzLnN2Zy51bnBhdXNlQW5pbWF0aW9ucygpO1xuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFuaW1hdGlvbnMgdG8gZmluaXNoLlxuICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIEdhbWVWaWV3LmFuaW1hdGlvbkR1cmF0aW9uICogMTAwMCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIHRyYW5zaXRpb24gYW5pbWF0aW9uIGJldHdlZW4gdHdvIHNxdWFyZSBzdGF0ZXMuXG4gICAgICovXG4gICAgc3RhdGljIGdldFNxdWFyZVN0YXRlVHJhbnNpdGlvbklkKGZyb21TdGF0ZSwgdG9TdGF0ZSkge1xuICAgICAgICBjb25zdCBmcm9tU3RhdGVTdHJpbmcgPSBTcXVhcmVTdGF0ZVtmcm9tU3RhdGVdO1xuICAgICAgICBjb25zdCB0b1N0YXRlU3RyaW5nID0gU3F1YXJlU3RhdGVbdG9TdGF0ZV07XG4gICAgICAgIGlmIChmcm9tU3RhdGUgPT09IHRvU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBgc3F1YXJlLSR7ZnJvbVN0YXRlU3RyaW5nfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBzcXVhcmUtJHtmcm9tU3RhdGVTdHJpbmd9LXRvLSR7dG9TdGF0ZVN0cmluZ31gO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLnN2Zy5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2dhbWUtc3ZnJyk7XG4gICAgICAgIGNvbnN0IHZpZXdCb3hTaXplID0gR2FtZVZpZXcuc3F1YXJlU2l6ZSAqIDggKyBHYW1lVmlldy5tYXJnaW5XaWR0aCAqIDI7XG4gICAgICAgIHRoaXMuc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsIGAwIDAgJHt2aWV3Qm94U2l6ZX0gJHt2aWV3Qm94U2l6ZX1gKTtcbiAgICAgICAgdGhpcy5zdmcuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuY3JlYXRlRGVmcygpO1xuICAgICAgICB0aGlzLmNyZWF0ZUJvYXJkKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlRGlzY1ZpZXdzKCk7XG4gICAgfVxuICAgIGNyZWF0ZURlZnMoKSB7XG4gICAgICAgIGNvbnN0IGRlZnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ2RlZnMnKTtcbiAgICAgICAgZm9yIChjb25zdCBbaWQsIGNlbnRlckNvbG9yLCBzaWRlQ29sb3JdIG9mIFtcbiAgICAgICAgICAgIFtHYW1lVmlldy5ibGFja0Rpc2NHcmFkaWVudElkLCAncmdiKDMyLCAzMiwgMzIpJywgJ3JnYigyNCwgMjQsIDI0KSddLFxuICAgICAgICAgICAgW0dhbWVWaWV3LndoaXRlRGlzY0dyYWRpZW50SWQsICdyZ2IoMjI0LCAyMjQsIDI0NCknLCAncmdiKDE2OCwgMTY4LCAxNjgpJ10sXG4gICAgICAgIF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGdyYWRpZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdyYWRpYWxHcmFkaWVudCcpO1xuICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9wMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAnc3RvcCcpO1xuICAgICAgICAgICAgICAgIHN0b3AxLnNldEF0dHJpYnV0ZSgnb2Zmc2V0JywgJzkwJScpO1xuICAgICAgICAgICAgICAgIHN0b3AxLnNldEF0dHJpYnV0ZSgnc3RvcC1jb2xvcicsIGNlbnRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5hcHBlbmRDaGlsZChzdG9wMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ3N0b3AnKTtcbiAgICAgICAgICAgICAgICBzdG9wMi5zZXRBdHRyaWJ1dGUoJ29mZnNldCcsICcxMDAlJyk7XG4gICAgICAgICAgICAgICAgc3RvcDIuc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywgc2lkZUNvbG9yKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5hcHBlbmRDaGlsZChzdG9wMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKGdyYWRpZW50KTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ2ZpbHRlcicpO1xuICAgICAgICAgICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnaWQnLCBHYW1lVmlldy5kaXNjU2hhZG93RmlsdGVySWQpO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BTaGFkb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ2ZlRHJvcFNoYWRvdycpO1xuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3cuc2V0QXR0cmlidXRlKCdkeCcsICcwJyk7XG4gICAgICAgICAgICAgICAgZHJvcFNoYWRvdy5zZXRBdHRyaWJ1dGUoJ2R5JywgJzAnKTtcbiAgICAgICAgICAgICAgICBkcm9wU2hhZG93LnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgJzAuMycpO1xuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3cuc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicsICdibGFjaycpO1xuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3cuc2V0QXR0cmlidXRlKCdmbG9vZC1vcGFjaXR5JywgJzEnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZHJvcFNoYWRvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKGZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRlIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBmb3IgYWxsIHBvc3NpYmxlIHN0YXRlIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZm9yIChjb25zdCBmcm9tU3RhdGVTdHJpbmcgaW4gU3F1YXJlU3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb21TdGF0ZSA9IE51bWJlcihmcm9tU3RhdGVTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKGlzTmFOKGZyb21TdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9TdGF0ZVN0cmluZyBpbiBTcXVhcmVTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvU3RhdGUgPSBOdW1iZXIodG9TdGF0ZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHRvU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZnJvbVN0YXRlID09PSBTcXVhcmVTdGF0ZS5FbXB0eSAmJiB0b1N0YXRlID09PSBTcXVhcmVTdGF0ZS5FbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChHYW1lVmlldy5jcmVhdGVTcXVhcmVTdGF0ZVRyYW5zaXRpb24oZnJvbVN0YXRlLCB0b1N0YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoZGVmcyk7XG4gICAgfVxuICAgIGNyZWF0ZUJvYXJkKCkge1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJTaGFkb3dGaWx0ZXJJZCA9ICdib3JkZXItc2hhZG93LWZpbHRlcic7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdmaWx0ZXInKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCdpZCcsIGJvcmRlclNoYWRvd0ZpbHRlcklkKTtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BTaGFkb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ2ZlRHJvcFNoYWRvdycpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wU2hhZG93LnNldEF0dHJpYnV0ZSgnZHgnLCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wU2hhZG93LnNldEF0dHJpYnV0ZSgnZHknLCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wU2hhZG93LnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgJzAuNycpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wU2hhZG93LnNldEF0dHJpYnV0ZSgnZmxvb2QtY29sb3InLCAnYmxhY2snKTtcbiAgICAgICAgICAgICAgICAgICAgZHJvcFNoYWRvdy5zZXRBdHRyaWJ1dGUoJ2Zsb29kLW9wYWNpdHknLCAnMScpO1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZHJvcFNoYWRvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKGZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBib3JkZXJTaGFkb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ3JlY3QnKTtcbiAgICAgICAgICAgIGJvcmRlclNoYWRvdy5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsIGB1cmwoJyMke2JvcmRlclNoYWRvd0ZpbHRlcklkfScpYCk7XG4gICAgICAgICAgICBjb25zdCBib3JkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ3JlY3QnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbYm9yZGVyU2hhZG93LCBib3JkZXJdKSB7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB4eVN0cmluZyA9IChHYW1lVmlldy5tYXJnaW5XaWR0aCAtIEdhbWVWaWV3LmJvcmRlcldpZHRoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgneCcsIHh5U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3knLCB4eVN0cmluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZVN0cmluZyA9IChHYW1lVmlldy5zcXVhcmVTaXplICogOCArIEdhbWVWaWV3LmJvcmRlcldpZHRoICogMikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgc2l6ZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBzaXplU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpdXNTdHJpbmcgPSBHYW1lVmlldy5ib3JkZXJXaWR0aC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncngnLCByYWRpdXNTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncnknLCByYWRpdXNTdHJpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsbCcsICdibGFjaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoYm9yZGVyU2hhZG93KTtcbiAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKGJvcmRlcik7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAncmVjdCcpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIG9mIFsneCcsICd5J10pIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBHYW1lVmlldy5tYXJnaW5XaWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlTmFtZSBvZiBbJ3dpZHRoJywgJ2hlaWdodCddKSB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgKEdhbWVWaWV3LnNxdWFyZVNpemUgKiA4KS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJhY2tncm91bmQuc2V0QXR0cmlidXRlKCdmaWxsJywgR2FtZVZpZXcuYm9hcmRCYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoYmFja2dyb3VuZCk7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAnZycpO1xuICAgICAgICAgICAgZ3JpZC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xuICAgICAgICAgICAgZ3JpZC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIEdhbWVWaWV3LmdyaWRMaW5lV2lkdGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBHYW1lVmlldy5tYXJnaW5XaWR0aCArIGkgKiBHYW1lVmlldy5zcXVhcmVTaXplO1xuICAgICAgICAgICAgICAgIGNvbnN0IGIxID0gR2FtZVZpZXcubWFyZ2luV2lkdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYjIgPSBHYW1lVmlldy5tYXJnaW5XaWR0aCArIEdhbWVWaWV3LnNxdWFyZVNpemUgKiA4O1xuICAgICAgICAgICAgICAgIGdyaWQuYXBwZW5kQ2hpbGQoR2FtZVZpZXcuY3JlYXRlTGluZShhLCBiMSwgYSwgYjIpKTtcbiAgICAgICAgICAgICAgICBncmlkLmFwcGVuZENoaWxkKEdhbWVWaWV3LmNyZWF0ZUxpbmUoYjEsIGEsIGIyLCBhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZChncmlkKTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBkb3RzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdnJyk7XG4gICAgICAgICAgICBkb3RzLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdibGFjaycpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIFsyLCA2XSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN4ID0gR2FtZVZpZXcubWFyZ2luV2lkdGggKyBpICogR2FtZVZpZXcuc3F1YXJlU2l6ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGogb2YgWzIsIDZdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN5ID0gR2FtZVZpZXcubWFyZ2luV2lkdGggKyBqICogR2FtZVZpZXcuc3F1YXJlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdjaXJjbGUnKTtcbiAgICAgICAgICAgICAgICAgICAgZG90LnNldEF0dHJpYnV0ZSgnY3gnLCBjeC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgZG90LnNldEF0dHJpYnV0ZSgnY3knLCBjeS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgZG90LnNldEF0dHJpYnV0ZSgncicsIEdhbWVWaWV3LmRvdFJhZGl1cy50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgZG90cy5hcHBlbmRDaGlsZChkb3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKGRvdHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZURpc2NWaWV3cygpIHtcbiAgICAgICAgdGhpcy5zcXVhcmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IEdhbWVWaWV3Lm1hcmdpbldpZHRoICsgKGogKyAwLjUpICogR2FtZVZpZXcuc3F1YXJlU2l6ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gR2FtZVZpZXcubWFyZ2luV2lkdGggKyAoaSArIDAuNSkgKiBHYW1lVmlldy5zcXVhcmVTaXplO1xuICAgICAgICAgICAgICAgIHJvdy5wdXNoKG5ldyBEaXNjVmlldyh0aGlzLnN2ZywgY2VudGVyWCwgY2VudGVyWSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zcXVhcmVzLnB1c2gocm93KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlU3F1YXJlU3RhdGVUcmFuc2l0aW9uKGZyb21TdGF0ZSwgdG9TdGF0ZSkge1xuICAgICAgICBjb25zdCBncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAnZycpO1xuICAgICAgICBncm91cC5zZXRBdHRyaWJ1dGUoJ2lkJywgR2FtZVZpZXcuZ2V0U3F1YXJlU3RhdGVUcmFuc2l0aW9uSWQoZnJvbVN0YXRlLCB0b1N0YXRlKSk7XG4gICAgICAgIGNvbnN0IGZyb21WaXN1YWxQcm9wcyA9IEdhbWVWaWV3LmdldERpc2NWaXN1YWxQcm9wcyhmcm9tU3RhdGUsIHRvU3RhdGUpO1xuICAgICAgICBjb25zdCB0b1Zpc3VhbFByb3BzID0gR2FtZVZpZXcuZ2V0RGlzY1Zpc3VhbFByb3BzKHRvU3RhdGUsIGZyb21TdGF0ZSk7XG4gICAgICAgIC8vIEluIFNhZmFyaSwgU1ZHIGVsZW1lbnRzIHdpdGggZHJvcCBzaGFkb3dzIGFyZSByYXN0ZXJpemVkIGF0IGEgbG93IHJlc29sdXRpb24sIHNvIHdlIGNyZWF0ZSBhXG4gICAgICAgIC8vIHNlcGFyYXRlIHNoYWRvdyBlbGVtZW50IHRvIG1ha2UgdGhlIGRpc2MgbG9vayBiZXR0ZXIuIFRoZSB0d28gZWxlbWVudHMgYXJlIGdyb3VwZWQgdG9nZXRoZXJcbiAgICAgICAgLy8gd2l0aCBjb21tb24gdHJhbnNmb3JtYXRpb25zLlxuICAgICAgICBjb25zdCBzaGFkb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ3JlY3QnKTtcbiAgICAgICAgc2hhZG93LnNldEF0dHJpYnV0ZSgnZmlsbCcsICdibGFjaycpO1xuICAgICAgICBzaGFkb3cuc2V0QXR0cmlidXRlKCdmaWx0ZXInLCBgdXJsKCcjJHtHYW1lVmlldy5kaXNjU2hhZG93RmlsdGVySWR9JylgKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kQ2hpbGQoc2hhZG93KTtcbiAgICAgICAgY29uc3QgbGVnYWxNb3ZlSW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdyZWN0Jyk7XG4gICAgICAgIC8vIFJvdGF0ZSB0aGUgbGVnYWwgbW92ZSBpbmRpY2F0b3Igc28gaXQgaGFzIGEgZGlhbW9uZCBzaGFwZS5cbiAgICAgICAgbGVnYWxNb3ZlSW5kaWNhdG9yLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3JvdGF0ZSg0NSwgMCwgMCknKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kQ2hpbGQobGVnYWxNb3ZlSW5kaWNhdG9yKTtcbiAgICAgICAgY29uc3QgYmxhY2tEaXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdyZWN0Jyk7XG4gICAgICAgIGJsYWNrRGlzYy5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBgdXJsKCcjJHtHYW1lVmlldy5ibGFja0Rpc2NHcmFkaWVudElkfScpYCk7XG4gICAgICAgIGdyb3VwLmFwcGVuZENoaWxkKGJsYWNrRGlzYyk7XG4gICAgICAgIGNvbnN0IHdoaXRlRGlzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAncmVjdCcpO1xuICAgICAgICB3aGl0ZURpc2Muc2V0QXR0cmlidXRlKCdmaWxsJywgYHVybCgnIyR7R2FtZVZpZXcud2hpdGVEaXNjR3JhZGllbnRJZH0nKWApO1xuICAgICAgICBncm91cC5hcHBlbmRDaGlsZCh3aGl0ZURpc2MpO1xuICAgICAgICAvLyBJZiB0aGUgc3F1YXJlIHRyYW5zaXRpb25zIGZyb20gYSBsZWdhbCBtb3ZlIHRvIGEgZGlzYywgcm90YXRlIHRoZSBkaXNjIGFuZCBpdHMgc2hhZG93IGJ5IDQ1XG4gICAgICAgIC8vIGRlZ3JlZXMgdG8gYWxpZ24gaXQgd2l0aCB0aGUgbGVnYWwgbW92ZSBpbmRpY2F0b3IgaW4gdGhlIHRyYW5zaXRpb24gYW5pbWF0aW9uLlxuICAgICAgICBjb25zdCBpc0xlZ2FsTW92ZVRvRGlzYyA9IChmcm9tU3RhdGUgPT09IFNxdWFyZVN0YXRlLkJsYWNrTGVnYWxNb3ZlIHx8IGZyb21TdGF0ZSA9PT0gU3F1YXJlU3RhdGUuV2hpdGVMZWdhbE1vdmUpICYmXG4gICAgICAgICAgICAodG9TdGF0ZSA9PT0gU3F1YXJlU3RhdGUuQmxhY2sgfHwgdG9TdGF0ZSA9PT0gU3F1YXJlU3RhdGUuV2hpdGUpO1xuICAgICAgICBpZiAoaXNMZWdhbE1vdmVUb0Rpc2MpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbc2hhZG93LCBibGFja0Rpc2MsIHdoaXRlRGlzY10pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3JvdGF0ZSg0NSwgMCwgMCknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZGlzYyBmbGlwcywgcGxheSBhbiBhbmltYXRpb24gdGhhdCBzcXVhc2hlcyB0aGUgZGlzYyBob3Jpem9udGFsbHkgYW5kIHRoZW4gc2NhbGVzIGl0XG4gICAgICAgIC8vIGJhY2suXG4gICAgICAgIGNvbnN0IGlzRmxpcCA9IChmcm9tU3RhdGUgPT09IFNxdWFyZVN0YXRlLkJsYWNrICYmIHRvU3RhdGUgPT09IFNxdWFyZVN0YXRlLldoaXRlKSB8fFxuICAgICAgICAgICAgKGZyb21TdGF0ZSA9PT0gU3F1YXJlU3RhdGUuV2hpdGUgJiYgdG9TdGF0ZSA9PT0gU3F1YXJlU3RhdGUuQmxhY2spO1xuICAgICAgICBpZiAoaXNGbGlwKSB7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRlVHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdhbmltYXRlVHJhbnNmb3JtJyk7XG4gICAgICAgICAgICBhbmltYXRlVHJhbnNmb3JtLnNldEF0dHJpYnV0ZSgnYXR0cmlidXRlTmFtZScsICd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgIGFuaW1hdGVUcmFuc2Zvcm0uc2V0QXR0cmlidXRlKCdhdHRyaWJ1dGVUeXBlJywgJ1hNTCcpO1xuICAgICAgICAgICAgYW5pbWF0ZVRyYW5zZm9ybS5zZXRBdHRyaWJ1dGUoJ2R1cicsIGAke0dhbWVWaWV3LmFuaW1hdGlvbkR1cmF0aW9ufXNgKTtcbiAgICAgICAgICAgIGFuaW1hdGVUcmFuc2Zvcm0uc2V0QXR0cmlidXRlKCdjYWxjTW9kZScsICdzcGxpbmUnKTtcbiAgICAgICAgICAgIGFuaW1hdGVUcmFuc2Zvcm0uc2V0QXR0cmlidXRlKCdmaWxsJywgJ2ZyZWV6ZScpO1xuICAgICAgICAgICAgYW5pbWF0ZVRyYW5zZm9ybS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnc2NhbGUnKTtcbiAgICAgICAgICAgIGFuaW1hdGVUcmFuc2Zvcm0uc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMSAxOyAwLjIgMTsgMSAxJyk7XG4gICAgICAgICAgICBhbmltYXRlVHJhbnNmb3JtLnNldEF0dHJpYnV0ZSgna2V5VGltZXMnLCAnMDswLjU7MScpO1xuICAgICAgICAgICAgYW5pbWF0ZVRyYW5zZm9ybS5zZXRBdHRyaWJ1dGUoJ2tleVNwbGluZXMnLCAnMC41IDAuMSAwLjkgMC41OzAuMSAwLjUgMC41IDAuOScpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtzaGFkb3csIGJsYWNrRGlzYywgd2hpdGVEaXNjXSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYW5pbWF0ZVRyYW5zZm9ybS5jbG9uZU5vZGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtzaGFkb3csIGxlZ2FsTW92ZUluZGljYXRvciwgYmxhY2tEaXNjLCB3aGl0ZURpc2NdKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgb2YgWyd4JywgJ3knXSkge1xuICAgICAgICAgICAgICAgIEdhbWVWaWV3LmFkZEF0dHJpYnV0ZU9yQW5pbWF0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIC1mcm9tVmlzdWFsUHJvcHMuc2l6ZSAqIDAuNSwgLXRvVmlzdWFsUHJvcHMuc2l6ZSAqIDAuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgb2YgWyd3aWR0aCcsICdoZWlnaHQnXSkge1xuICAgICAgICAgICAgICAgIEdhbWVWaWV3LmFkZEF0dHJpYnV0ZU9yQW5pbWF0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIGZyb21WaXN1YWxQcm9wcy5zaXplLCB0b1Zpc3VhbFByb3BzLnNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIG9mIFsncngnLCAncnknXSkge1xuICAgICAgICAgICAgICAgIEdhbWVWaWV3LmFkZEF0dHJpYnV0ZU9yQW5pbWF0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIGZyb21WaXN1YWxQcm9wcy5jb3JuZXJSYWRpdXMsIHRvVmlzdWFsUHJvcHMuY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBHYW1lVmlldy5hZGRBdHRyaWJ1dGVPckFuaW1hdGlvbihzaGFkb3csICdvcGFjaXR5JywgZnJvbVZpc3VhbFByb3BzLnNoYWRvd09wYWNpdHksIHRvVmlzdWFsUHJvcHMuc2hhZG93T3BhY2l0eSk7XG4gICAgICAgIEdhbWVWaWV3LmFkZEF0dHJpYnV0ZU9yQW5pbWF0aW9uKGxlZ2FsTW92ZUluZGljYXRvciwgJ2ZpbGwnLCBmcm9tVmlzdWFsUHJvcHMubGVnYWxNb3ZlSW5kaWNhdG9yRmlsbCwgdG9WaXN1YWxQcm9wcy5sZWdhbE1vdmVJbmRpY2F0b3JGaWxsKTtcbiAgICAgICAgR2FtZVZpZXcuYWRkQXR0cmlidXRlT3JBbmltYXRpb24obGVnYWxNb3ZlSW5kaWNhdG9yLCAnZmlsbC1vcGFjaXR5JywgZnJvbVZpc3VhbFByb3BzLmxlZ2FsTW92ZUluZGljYXRvck9wYWNpdHksIHRvVmlzdWFsUHJvcHMubGVnYWxNb3ZlSW5kaWNhdG9yT3BhY2l0eSk7XG4gICAgICAgIEdhbWVWaWV3LmFkZEF0dHJpYnV0ZU9yQW5pbWF0aW9uKGJsYWNrRGlzYywgJ2ZpbGwtb3BhY2l0eScsIGZyb21WaXN1YWxQcm9wcy5ibGFja0Rpc2NPcGFjaXR5LCB0b1Zpc3VhbFByb3BzLmJsYWNrRGlzY09wYWNpdHkpO1xuICAgICAgICBHYW1lVmlldy5hZGRBdHRyaWJ1dGVPckFuaW1hdGlvbih3aGl0ZURpc2MsICdmaWxsLW9wYWNpdHknLCBmcm9tVmlzdWFsUHJvcHMud2hpdGVEaXNjT3BhY2l0eSwgdG9WaXN1YWxQcm9wcy53aGl0ZURpc2NPcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGlzY1Zpc3VhbFByb3BzKHN0YXRlLCBjb3VudGVycGFydCkge1xuICAgICAgICBpZiAoc3RhdGUgPT09IFNxdWFyZVN0YXRlLkVtcHR5ICYmIGNvdW50ZXJwYXJ0ID09PSBTcXVhcmVTdGF0ZS5FbXB0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGF0ZSBhbmQgY291bnRlcnBhcnQgY2Fubm90IGJvdGggYmUgZW1wdHknKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2l6ZTtcbiAgICAgICAgbGV0IGNvcm5lclJhZGl1cztcbiAgICAgICAgbGV0IHNoYWRvd09wYWNpdHk7XG4gICAgICAgIGxldCBsZWdhbE1vdmVJbmRpY2F0b3JGaWxsO1xuICAgICAgICBsZXQgbGVnYWxNb3ZlSW5kaWNhdG9yT3BhY2l0eTtcbiAgICAgICAgbGV0IGJsYWNrRGlzY09wYWNpdHk7XG4gICAgICAgIGxldCB3aGl0ZURpc2NPcGFjaXR5O1xuICAgICAgICBpZiAoc3RhdGUgPT09IFNxdWFyZVN0YXRlLkVtcHR5KSB7XG4gICAgICAgICAgICAvLyBObyBpbmZpbml0ZSByZWN1cnNpb24gYmVjYXVzZSBgc3RhdGVgIGFuZCBgY291bnRlcnBhcnRgIGNhbm5vdCBib3RoIGJlIGBFbXB0eWAuXG4gICAgICAgICAgICBjb25zdCBjb3VudGVycGFydFZpc3VhbFByb3BzID0gR2FtZVZpZXcuZ2V0RGlzY1Zpc3VhbFByb3BzKGNvdW50ZXJwYXJ0LCBzdGF0ZSk7XG4gICAgICAgICAgICBzaXplID0gY291bnRlcnBhcnRWaXN1YWxQcm9wcy5zaXplICogMC41O1xuICAgICAgICAgICAgY29ybmVyUmFkaXVzID0gY291bnRlcnBhcnRWaXN1YWxQcm9wcy5jb3JuZXJSYWRpdXMgKiAwLjU7XG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5ID0gMDtcbiAgICAgICAgICAgIGxlZ2FsTW92ZUluZGljYXRvckZpbGwgPSBjb3VudGVycGFydFZpc3VhbFByb3BzLmxlZ2FsTW92ZUluZGljYXRvckZpbGw7XG4gICAgICAgICAgICBsZWdhbE1vdmVJbmRpY2F0b3JPcGFjaXR5ID0gMDtcbiAgICAgICAgICAgIGJsYWNrRGlzY09wYWNpdHkgPSAwO1xuICAgICAgICAgICAgd2hpdGVEaXNjT3BhY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTcXVhcmVTdGF0ZS5CbGFjazpcbiAgICAgICAgICAgICAgICBjYXNlIFNxdWFyZVN0YXRlLldoaXRlOlxuICAgICAgICAgICAgICAgICAgICBzaXplID0gR2FtZVZpZXcuZGlzY1JhZGl1cyAqIDI7XG4gICAgICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cyA9IEdhbWVWaWV3LmRpc2NSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd09wYWNpdHkgPSAxO1xuICAgICAgICAgICAgICAgICAgICBsZWdhbE1vdmVJbmRpY2F0b3JPcGFjaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBTcXVhcmVTdGF0ZS5CbGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxhY2tEaXNjT3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZURpc2NPcGFjaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsYWNrRGlzY09wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVEaXNjT3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTcXVhcmVTdGF0ZS5CbGFja0xlZ2FsTW92ZTpcbiAgICAgICAgICAgICAgICBjYXNlIFNxdWFyZVN0YXRlLldoaXRlTGVnYWxNb3ZlOlxuICAgICAgICAgICAgICAgICAgICBzaXplID0gR2FtZVZpZXcubGVnYWxNb3ZlU3F1YXJlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29ybmVyUmFkaXVzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93T3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2FsTW92ZUluZGljYXRvck9wYWNpdHkgPSAwLjU7XG4gICAgICAgICAgICAgICAgICAgIGJsYWNrRGlzY09wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZURpc2NPcGFjaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0YXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTcXVhcmVTdGF0ZS5CbGFjazpcbiAgICAgICAgICAgICAgICBjYXNlIFNxdWFyZVN0YXRlLkJsYWNrTGVnYWxNb3ZlOlxuICAgICAgICAgICAgICAgICAgICBsZWdhbE1vdmVJbmRpY2F0b3JGaWxsID0gJ2JsYWNrJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTcXVhcmVTdGF0ZS5XaGl0ZTpcbiAgICAgICAgICAgICAgICBjYXNlIFNxdWFyZVN0YXRlLldoaXRlTGVnYWxNb3ZlOlxuICAgICAgICAgICAgICAgICAgICBsZWdhbE1vdmVJbmRpY2F0b3JGaWxsID0gJ3doaXRlJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0YXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMsXG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5LFxuICAgICAgICAgICAgbGVnYWxNb3ZlSW5kaWNhdG9yRmlsbCxcbiAgICAgICAgICAgIGxlZ2FsTW92ZUluZGljYXRvck9wYWNpdHksXG4gICAgICAgICAgICBibGFja0Rpc2NPcGFjaXR5LFxuICAgICAgICAgICAgd2hpdGVEaXNjT3BhY2l0eVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgYWRkQXR0cmlidXRlT3JBbmltYXRpb24oZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIG5ld1ZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgJ2FuaW1hdGUnKTtcbiAgICAgICAgYW5pbWF0ZS5zZXRBdHRyaWJ1dGUoJ2F0dHJpYnV0ZU5hbWUnLCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgYW5pbWF0ZS5zZXRBdHRyaWJ1dGUoJ2R1cicsIGAke0dhbWVWaWV3LmFuaW1hdGlvbkR1cmF0aW9ufXNgKTtcbiAgICAgICAgYW5pbWF0ZS5zZXRBdHRyaWJ1dGUoJ2NhbGNNb2RlJywgJ3NwbGluZScpO1xuICAgICAgICBhbmltYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdmcmVlemUnKTtcbiAgICAgICAgYW5pbWF0ZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGAke29sZFZhbHVlfTske25ld1ZhbHVlfWApO1xuICAgICAgICBhbmltYXRlLnNldEF0dHJpYnV0ZSgna2V5VGltZXMnLCAnMDsxJyk7XG4gICAgICAgIGFuaW1hdGUuc2V0QXR0cmlidXRlKCdrZXlTcGxpbmVzJywgJzAuMSAwLjUgMC41IDAuOScpO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGFuaW1hdGUpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlTGluZSh4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICBjb25zdCBsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsICdsaW5lJyk7XG4gICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCd4MScsIHgxLnRvU3RyaW5nKCkpO1xuICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZSgneTEnLCB5MS50b1N0cmluZygpKTtcbiAgICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoJ3gyJywgeDIudG9TdHJpbmcoKSk7XG4gICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCd5MicsIHkyLnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG59XG5HYW1lVmlldy5zcXVhcmVTaXplID0gMTA7XG5HYW1lVmlldy5tYXJnaW5XaWR0aCA9IDM7XG5HYW1lVmlldy5ncmlkTGluZVdpZHRoID0gMC4yO1xuR2FtZVZpZXcuYm9yZGVyV2lkdGggPSAxO1xuR2FtZVZpZXcuZG90UmFkaXVzID0gMC43NTtcbkdhbWVWaWV3LmRpc2NSYWRpdXMgPSA0O1xuR2FtZVZpZXcubGVnYWxNb3ZlU3F1YXJlU2l6ZSA9IDQ7XG5HYW1lVmlldy5ibGFja0Rpc2NHcmFkaWVudElkID0gJ2JsYWNrLWRpc2MtZ3JhZGllbnQnO1xuR2FtZVZpZXcud2hpdGVEaXNjR3JhZGllbnRJZCA9ICd3aGl0ZS1kaXNjLWdyYWRpZW50JztcbkdhbWVWaWV3LmRpc2NTaGFkb3dGaWx0ZXJJZCA9ICdkaXNjLXNoYWRvdy1maWx0ZXInO1xuR2FtZVZpZXcuYm9hcmRCYWNrZ3JvdW5kQ29sb3IgPSAncmdiKDYzLCAxNDIsIDEwNiknO1xuR2FtZVZpZXcuYW5pbWF0aW9uRHVyYXRpb24gPSAwLjU7XG4vKipcbiAqIEEgaGVscGVyIGNsYXNzIHRoYXQgbGlzdGVucyB0byB1c2VyIGNsaWNrcyBvbiB0aGUgc3F1YXJlcyBvZiBsZWdhbCBtb3Zlcy5cbiAqL1xuY2xhc3MgU1ZHQ2xpY2tIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdmcpIHtcbiAgICAgICAgdGhpcy5zdmcgPSBzdmc7XG4gICAgICAgIC8vIFVzZSBhbiBhcnJvdyBmdW5jdGlvbiB0byBiaW5kIHRoZSBgdGhpc2AgY29udGV4dC5cbiAgICAgICAgdGhpcy5vbkNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5sZWdhbE1vdmVGbGF0SW5kaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBnZXRNb3ZlKCkgY2FsbCB3YXMgbWFkZS5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXNvbHZlQWN0aW9uUHJvbWlzZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxlZ2FsIG1vdmUgaXMgYXZhaWxhYmxlIGJ1dCBhbiBhY3Rpb24gcHJvbWlzZSBpcyBzZXQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucmVzb2x2ZUFjdGlvblByb21pc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xlZ2FsIG1vdmVzIGFyZSBhdmFpbGFibGUgYnV0IG5vIGFjdGlvbiBwcm9taXNlIGlzIHNldCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2xpZW50UG9pbnQgPSBuZXcgRE9NUG9pbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgICAgICBjb25zdCBzY3JlZW5DVE0gPSB0aGlzLnN2Zy5nZXRTY3JlZW5DVE0oKTtcbiAgICAgICAgICAgIGlmIChzY3JlZW5DVE0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgdGhlIHNjcmVlbiBDVE0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN2Z1BvaW50ID0gY2xpZW50UG9pbnQubWF0cml4VHJhbnNmb3JtKHNjcmVlbkNUTS5pbnZlcnNlKCkpO1xuICAgICAgICAgICAgbGV0IHJvdyA9IChzdmdQb2ludC55IC0gR2FtZVZpZXcubWFyZ2luV2lkdGgpIC8gR2FtZVZpZXcuc3F1YXJlU2l6ZTtcbiAgICAgICAgICAgIGlmIChyb3cgPCAwIHx8IHJvdyA+PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihyb3cpO1xuICAgICAgICAgICAgbGV0IGNvbHVtbiA9IChzdmdQb2ludC54IC0gR2FtZVZpZXcubWFyZ2luV2lkdGgpIC8gR2FtZVZpZXcuc3F1YXJlU2l6ZTtcbiAgICAgICAgICAgIGlmIChjb2x1bW4gPCAwIHx8IGNvbHVtbiA+PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihjb2x1bW4pO1xuICAgICAgICAgICAgY29uc3QgZmxhdEluZGV4ID0gcm93ICogOCArIGNvbHVtbjtcbiAgICAgICAgICAgIGlmICghdGhpcy5sZWdhbE1vdmVGbGF0SW5kaWNlcy5pbmNsdWRlcyhmbGF0SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xpY2tlZCBvbiBhIHNxdWFyZSBidXQgaXQgaXMgbm90IGEgbGVnYWwgbW92ZS5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXNwb25kIHRoZSBwcm9taXNlIHdpdGggdGhlIGFjdGlvbi5cbiAgICAgICAgICAgIHRoaXMubGVnYWxNb3ZlRmxhdEluZGljZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVBY3Rpb25Qcm9taXNlID0gdGhpcy5yZXNvbHZlQWN0aW9uUHJvbWlzZTtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUFjdGlvblByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgcmVzb2x2ZUFjdGlvblByb21pc2UoQWN0aW9uLmZyb21fZmxhdF9pbmRleChmbGF0SW5kZXgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdmcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICB0aGlzLmxlZ2FsTW92ZUZsYXRJbmRpY2VzID0gW107XG4gICAgICAgIHRoaXMucmVzb2x2ZUFjdGlvblByb21pc2UgPSBudWxsO1xuICAgIH1cbiAgICBbU3ltYm9sLmRpc3Bvc2VdKCkge1xuICAgICAgICB0aGlzLnN2Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IHJldHVybnMgdGhlIHNxdWFyZSB0aGF0IHRoZSBwbGF5ZXIgbWFrZXMgYSBtb3ZlIHRvLlxuICAgICAqL1xuICAgIGdldE1vdmUobGVnYWxNb3Zlcykge1xuICAgICAgICBpZiAobGVnYWxNb3Zlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbGVnYWwgbW92ZSBpcyBhdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZ2FsTW92ZUZsYXRJbmRpY2VzID0gbGVnYWxNb3Zlcy5tYXAobW92ZSA9PiBtb3ZlLmZsYXRfaW5kZXgoKSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUFjdGlvblByb21pc2UgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIEEgdmlldyB0aGF0IGRpc3BsYXlzIGEgZGlzYyB0aGF0IG1heSBmaWxsIGluIGEgc3F1YXJlIG9uIHRoZSBib2FyZC5cbiAqL1xuY2xhc3MgRGlzY1ZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHN2ZywgY2VudGVyWCwgY2VudGVyWSkge1xuICAgICAgICB0aGlzLnN2ZyA9IHN2ZztcbiAgICAgICAgdGhpcy5jZW50ZXJYID0gY2VudGVyWDtcbiAgICAgICAgdGhpcy5jZW50ZXJZID0gY2VudGVyWTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNxdWFyZVN0YXRlLkVtcHR5O1xuICAgICAgICB0aGlzLnVzZUVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBnZXRTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gU3F1YXJlU3RhdGUuRW1wdHkgJiYgdGhpcy5zdGF0ZSA9PT0gU3F1YXJlU3RhdGUuRW1wdHkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBzcXVhcmUgaXMgZW1wdHkgYmVmb3JlIGFuZCBhZnRlciwgdGhlcmUgaXMgbm90aGluZyB0byBhbmltYXRlLlxuICAgICAgICAgICAgaWYgKHRoaXMudXNlRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVzZUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTkFNRVNQQUNFLCAndXNlJyk7XG4gICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnVzZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25JZCA9IEdhbWVWaWV3LmdldFNxdWFyZVN0YXRlVHJhbnNpdGlvbklkKHRoaXMuc3RhdGUsIHN0YXRlKTtcbiAgICAgICAgdGhpcy51c2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsIGAjJHt0cmFuc2l0aW9uSWR9YCk7XG4gICAgICAgIHRoaXMudXNlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLmNlbnRlclh9LCAke3RoaXMuY2VudGVyWX0pYCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG59XG4vLyBSdW4gdGhlIG1haW4gZnVuY3Rpb24uXG5tYWluKCkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy52ID0gKGV4cG9ydHMsIHdhc21Nb2R1bGVJZCwgd2FzbU1vZHVsZUhhc2gsIGltcG9ydHNPYmopID0+IHtcblx0dmFyIHJlcSA9IGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyB3YXNtTW9kdWxlSGFzaCArIFwiLm1vZHVsZS53YXNtXCIpO1xuXHR2YXIgZmFsbGJhY2sgPSAoKSA9PiAocmVxXG5cdFx0LnRoZW4oKHgpID0+ICh4LmFycmF5QnVmZmVyKCkpKVxuXHRcdC50aGVuKChieXRlcykgPT4gKFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJ5dGVzLCBpbXBvcnRzT2JqKSkpXG5cdFx0LnRoZW4oKHJlcykgPT4gKE9iamVjdC5hc3NpZ24oZXhwb3J0cywgcmVzLmluc3RhbmNlLmV4cG9ydHMpKSkpO1xuXHRyZXR1cm4gcmVxLnRoZW4oKHJlcykgPT4ge1xuXHRcdGlmICh0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHJlcywgaW1wb3J0c09iailcblx0XHRcdFx0LnRoZW4oXG5cdFx0XHRcdFx0KHJlcykgPT4gKE9iamVjdC5hc3NpZ24oZXhwb3J0cywgcmVzLmluc3RhbmNlLmV4cG9ydHMpKSxcblx0XHRcdFx0XHQoZSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYocmVzLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpICE9PSBcImFwcGxpY2F0aW9uL3dhc21cIikge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmdgIGZhaWxlZCBiZWNhdXNlIHlvdXIgc2VydmVyIGRvZXMgbm90IHNlcnZlIHdhc20gd2l0aCBgYXBwbGljYXRpb24vd2FzbWAgTUlNRSB0eXBlLiBGYWxsaW5nIGJhY2sgdG8gYFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlYCB3aGljaCBpcyBzbG93ZXIuIE9yaWdpbmFsIGVycm9yOlxcblwiLCBlKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbGxiYWNrKCk7XG5cdH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdtb2R1bGUnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTYpO1xuIl0sIm5hbWVzIjpbIndlYnBhY2tRdWV1ZXMiLCJ3ZWJwYWNrRXhwb3J0cyIsIndlYnBhY2tFcnJvciIsInJlc29sdmVRdWV1ZSIsIndhc20iLCJfX3diZ19zZXRfd2FzbSIsInZhbCIsImNhY2hlZFRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJtb2R1bGUiLCJyZXF1aXJlIiwiaWdub3JlQk9NIiwiZmF0YWwiLCJkZWNvZGUiLCJjYWNoZWRVaW50OE1lbW9yeTAiLCJoZWFwIiwiQXJyYXkiLCJmaWxsIiwidW5kZWZpbmVkIiwicHVzaCIsImhlYXBfbmV4dCIsImxlbmd0aCIsImNhY2hlZEludDMyTWVtb3J5MCIsImdldEludDMyTWVtb3J5MCIsImJ5dGVMZW5ndGgiLCJJbnQzMkFycmF5IiwibWVtb3J5IiwiYnVmZmVyIiwiY2FjaGVkVWludDMyTWVtb3J5MCIsInRha2VPYmplY3QiLCJpZHgiLCJyZXQiLCJnZXRPYmplY3QiLCJkcm9wT2JqZWN0IiwiUGxheWVyIiwiT2JqZWN0IiwiZnJlZXplIiwiQmxhY2siLCJXaGl0ZSIsIkFjdGlvbkZpbmFsaXphdGlvbiIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJ1bnJlZ2lzdGVyIiwicHRyIiwiX193YmdfYWN0aW9uX2ZyZWUiLCJBY3Rpb24iLCJfX3dyYXAiLCJvYmoiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJfX3diZ19wdHIiLCJfX2Rlc3Ryb3lfaW50b19yYXciLCJ0aGlzIiwiZnJlZSIsIm1hc2siLCJfX3diZ19nZXRfYWN0aW9uX21hc2siLCJCaWdJbnQiLCJhc1VpbnROIiwiYXJnMCIsIl9fd2JnX3NldF9hY3Rpb25fbWFzayIsImZyb21fbWFzayIsImFjdGlvbl9mcm9tX21hc2siLCJwYXNzIiwiYWN0aW9uX3Bhc3MiLCJmcm9tX2ZsYXRfaW5kZXgiLCJmbGF0X2luZGV4IiwiYWN0aW9uX2Zyb21fZmxhdF9pbmRleCIsImZyb21fcm93X2NvbHVtbiIsInJvdyIsImNvbHVtbiIsImFjdGlvbl9mcm9tX3Jvd19jb2x1bW4iLCJpc19wYXNzIiwiYWN0aW9uX2lzX3Bhc3MiLCJhY3Rpb25fZmxhdF9pbmRleCIsImFjdGlvbl9yb3ciLCJhY3Rpb25fY29sdW1uIiwiU3RhdGVGaW5hbGl6YXRpb24iLCJfX3diZ19zdGF0ZV9mcmVlIiwiU3RhdGUiLCJjdXJyZW50X3BsYXllciIsIl9fd2JnX2dldF9zdGF0ZV9jdXJyZW50X3BsYXllciIsIl9fd2JnX3NldF9zdGF0ZV9jdXJyZW50X3BsYXllciIsInBsYXllcl9kaXNjcyIsIm9wcG9uZW50X2Rpc2NzIiwiX193YmdfZ2V0X3N0YXRlX29wcG9uZW50X2Rpc2NzIiwiX193Ymdfc2V0X3N0YXRlX29wcG9uZW50X2Rpc2NzIiwibGVnYWxfbW92ZXMiLCJfX3diZ19nZXRfc3RhdGVfbGVnYWxfbW92ZXMiLCJfX3diZ19zZXRfc3RhdGVfbGVnYWxfbW92ZXMiLCJ3YXNfcGFzcyIsIl9fd2JnX2dldF9zdGF0ZV93YXNfcGFzcyIsIl9fd2JnX3NldF9zdGF0ZV93YXNfcGFzcyIsImlzX2VuZGdhbWUiLCJfX3diZ19nZXRfc3RhdGVfaXNfZW5kZ2FtZSIsIl9fd2JnX3NldF9zdGF0ZV9pc19lbmRnYW1lIiwic3RhdGVfbmV3Iiwic3RlcCIsImFjdGlvbiIsImluc3RhbmNlIiwia2xhc3MiLCJFcnJvciIsIm5hbWUiLCJfYXNzZXJ0Q2xhc3MiLCJwdHIwIiwic3RhdGVfc3RlcCIsImxlZ2FsX21vdmVfdmVjIiwicmV0cHRyIiwiX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlciIsInN0YXRlX2xlZ2FsX21vdmVfdmVjIiwicjAiLCJyMSIsInYxIiwibGVuIiwic2xpY2UiLCJVaW50MzJBcnJheSIsInN1YmFycmF5IiwicmVzdWx0IiwiaSIsImdldEFycmF5SnNWYWx1ZUZyb21XYXNtMCIsIl9fd2JpbmRnZW5fZnJlZSIsImdldF9kaXNjIiwic3RhdGVfZ2V0X2Rpc2MiLCJfX3diZ19hY3Rpb25fbmV3IiwiYWRkSGVhcE9iamVjdCIsIl9fd2JpbmRnZW5fdGhyb3ciLCJhcmcxIiwiVWludDhBcnJheSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0Iiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJuZXh0IiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsIm1haW4iLCJzdmdDb250YWluZXIiLCJnYW1lVmlldyIsIkdhbWVWaWV3IiwiY2xpY2tIYW5kbGVyIiwiU1ZHQ2xpY2tIYW5kbGVyIiwiZ2V0U1ZHIiwiZ2FtZVN0YXRlIiwibmV3Iiwic2V0U3F1YXJlU3RhdGVzRnJvbUdhbWVTdGF0ZSIsImxlZ2FsTW92ZXMiLCJhbGVydCIsImdldE1vdmUiLCJTVkdfTkFNRVNQQUNFIiwiU3F1YXJlU3RhdGUiLCJjb25zdHJ1Y3RvciIsImNvbnRhaW5lciIsInN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsImluaXRpYWxpemUiLCJpbm5lckhUTUwiLCJsZWdhbE1vdmVGbGF0SW5kaWNlcyIsIm1vdmUiLCJjdXJyZW50UGxheWVyTGVnYWxNb3ZlU3RhdGUiLCJCbGFja0xlZ2FsTW92ZSIsIldoaXRlTGVnYWxNb3ZlIiwiaXNTYW1lIiwic3F1YXJlU3RhdGVzIiwiaiIsInNxdWFyZVN0YXRlIiwiZmxhdEluZGV4IiwiaW5jbHVkZXMiLCJFbXB0eSIsInNxdWFyZXMiLCJnZXRTdGF0ZSIsInNldFN0YXRlIiwicGF1c2VBbmltYXRpb25zIiwic2V0Q3VycmVudFRpbWUiLCJ1bnBhdXNlQW5pbWF0aW9ucyIsInNldFRpbWVvdXQiLCJhbmltYXRpb25EdXJhdGlvbiIsImdldFNxdWFyZVN0YXRlVHJhbnNpdGlvbklkIiwiZnJvbVN0YXRlIiwidG9TdGF0ZSIsImZyb21TdGF0ZVN0cmluZyIsInRvU3RhdGVTdHJpbmciLCJ2aWV3Qm94U2l6ZSIsInNxdWFyZVNpemUiLCJtYXJnaW5XaWR0aCIsImNyZWF0ZURlZnMiLCJjcmVhdGVCb2FyZCIsImNyZWF0ZURpc2NWaWV3cyIsImRlZnMiLCJjZW50ZXJDb2xvciIsInNpZGVDb2xvciIsImJsYWNrRGlzY0dyYWRpZW50SWQiLCJ3aGl0ZURpc2NHcmFkaWVudElkIiwiZ3JhZGllbnQiLCJzdG9wMSIsInN0b3AyIiwiZmlsdGVyIiwiZGlzY1NoYWRvd0ZpbHRlcklkIiwiZHJvcFNoYWRvdyIsIk51bWJlciIsImlzTmFOIiwiY3JlYXRlU3F1YXJlU3RhdGVUcmFuc2l0aW9uIiwiYm9yZGVyU2hhZG93RmlsdGVySWQiLCJib3JkZXJTaGFkb3ciLCJib3JkZXIiLCJ4eVN0cmluZyIsImJvcmRlcldpZHRoIiwic2l6ZVN0cmluZyIsInJhZGl1c1N0cmluZyIsImJhY2tncm91bmQiLCJhdHRyaWJ1dGVOYW1lIiwiYm9hcmRCYWNrZ3JvdW5kQ29sb3IiLCJncmlkIiwiZ3JpZExpbmVXaWR0aCIsImEiLCJiMSIsImIyIiwiY3JlYXRlTGluZSIsImRvdHMiLCJjeCIsImN5IiwiZG90IiwiZG90UmFkaXVzIiwiY2VudGVyWCIsImNlbnRlclkiLCJEaXNjVmlldyIsImdyb3VwIiwiZnJvbVZpc3VhbFByb3BzIiwiZ2V0RGlzY1Zpc3VhbFByb3BzIiwidG9WaXN1YWxQcm9wcyIsInNoYWRvdyIsImxlZ2FsTW92ZUluZGljYXRvciIsImJsYWNrRGlzYyIsIndoaXRlRGlzYyIsImFuaW1hdGVUcmFuc2Zvcm0iLCJjbG9uZU5vZGUiLCJhZGRBdHRyaWJ1dGVPckFuaW1hdGlvbiIsInNpemUiLCJjb3JuZXJSYWRpdXMiLCJzaGFkb3dPcGFjaXR5IiwibGVnYWxNb3ZlSW5kaWNhdG9yRmlsbCIsImxlZ2FsTW92ZUluZGljYXRvck9wYWNpdHkiLCJibGFja0Rpc2NPcGFjaXR5Iiwid2hpdGVEaXNjT3BhY2l0eSIsInN0YXRlIiwiY291bnRlcnBhcnQiLCJjb3VudGVycGFydFZpc3VhbFByb3BzIiwiZGlzY1JhZGl1cyIsImxlZ2FsTW92ZVNxdWFyZVNpemUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiYW5pbWF0ZSIsIngxIiwieTEiLCJ4MiIsInkyIiwibGluZSIsIm9uQ2xpY2siLCJldmVudCIsInJlc29sdmVBY3Rpb25Qcm9taXNlIiwiY2xpZW50UG9pbnQiLCJET01Qb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwic2NyZWVuQ1RNIiwiZ2V0U2NyZWVuQ1RNIiwic3ZnUG9pbnQiLCJtYXRyaXhUcmFuc2Zvcm0iLCJpbnZlcnNlIiwieSIsIk1hdGgiLCJmbG9vciIsIngiLCJhZGRFdmVudExpc3RlbmVyIiwiU3ltYm9sIiwiZGlzcG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1c2VFbGVtZW50IiwidHJhbnNpdGlvbklkIiwiY2F0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicXVldWUiLCJkIiwiZm9yRWFjaCIsImZuIiwiciIsImJvZHkiLCJoYXNBd2FpdCIsImN1cnJlbnREZXBzIiwib3V0ZXJSZXNvbHZlIiwiZGVwUXVldWVzIiwiU2V0IiwicHJvbWlzZSIsInJlaiIsImRlcHMiLCJkZXAiLCJ3cmFwRGVwcyIsImdldFJlc3VsdCIsImZuUXVldWUiLCJxIiwiaGFzIiwiYWRkIiwiZXJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJobWQiLCJjaGlsZHJlbiIsInNldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2Iiwid2FzbU1vZHVsZUlkIiwid2FzbU1vZHVsZUhhc2giLCJpbXBvcnRzT2JqIiwicmVxIiwiZmV0Y2giLCJwIiwiZmFsbGJhY2siLCJhcnJheUJ1ZmZlciIsImJ5dGVzIiwiV2ViQXNzZW1ibHkiLCJpbnN0YW50aWF0ZSIsInJlcyIsImFzc2lnbiIsImluc3RhbnRpYXRlU3RyZWFtaW5nIiwiaGVhZGVycyIsIndhcm4iLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGVzdCIsInJlcGxhY2UiLCJuYyJdLCJzb3VyY2VSb290IjoiIn0=