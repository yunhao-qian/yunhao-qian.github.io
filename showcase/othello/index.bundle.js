(()=>{"use strict";var t,e,n,r,i={148:(t,e,n)=>{n.a(t,(async(t,r)=>{try{n.d(e,{Uw:()=>a.Uw,ai:()=>a.ai,rc:()=>a.rc});var i=n(504),a=n(800),s=t([i]);i=(s.then?(await s)():s)[0],(0,a.lI)(i),r()}catch(t){r(t)}}))},800:(t,e,n)=>{let r;function i(t){r=t}n.d(e,{Qn:()=>A,Uw:()=>f,ai:()=>p,lI:()=>i,rc:()=>_,xv:()=>b}),t=n.hmd(t);let a=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});a.decode();let s=null;const o=new Array(128).fill(void 0);o.push(void 0,null,!0,!1);let c=o.length,l=null;function u(){return null!==l&&0!==l.byteLength||(l=new Int32Array(r.memory.buffer)),l}let d=null;function h(t){const e=function(t){return o[t]}(t);return function(t){t<132||(o[t]=c,c=t)}(t),e}const p=Object.freeze({Black:0,0:"Black",White:1,1:"White"}),g="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_action_free(t>>>0)));class _{static __wrap(t){t>>>=0;const e=Object.create(_.prototype);return e.__wbg_ptr=t,g.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,g.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_action_free(t)}get mask(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set mask(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}static from_mask(t){const e=r.action_from_mask(t);return _.__wrap(e)}static pass(){const t=r.action_pass();return _.__wrap(t)}static from_flat_index(t){const e=r.action_from_flat_index(t);return _.__wrap(e)}static from_row_column(t,e){const n=r.action_from_row_column(t,e);return _.__wrap(n)}is_pass(){return 0!==r.action_is_pass(this.__wbg_ptr)}flat_index(){return r.action_flat_index(this.__wbg_ptr)>>>0}row(){return r.action_row(this.__wbg_ptr)>>>0}column(){return r.action_column(this.__wbg_ptr)>>>0}}const m="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_state_free(t>>>0)));class f{static __wrap(t){t>>>=0;const e=Object.create(f.prototype);return e.__wbg_ptr=t,m.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,m.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_state_free(t)}get current_player(){return r.__wbg_get_state_current_player(this.__wbg_ptr)}set current_player(t){r.__wbg_set_state_current_player(this.__wbg_ptr,t)}get player_discs(){const t=r.__wbg_get_action_mask(this.__wbg_ptr);return BigInt.asUintN(64,t)}set player_discs(t){r.__wbg_set_action_mask(this.__wbg_ptr,t)}get opponent_discs(){const t=r.__wbg_get_state_opponent_discs(this.__wbg_ptr);return BigInt.asUintN(64,t)}set opponent_discs(t){r.__wbg_set_state_opponent_discs(this.__wbg_ptr,t)}get legal_moves(){const t=r.__wbg_get_state_legal_moves(this.__wbg_ptr);return BigInt.asUintN(64,t)}set legal_moves(t){r.__wbg_set_state_legal_moves(this.__wbg_ptr,t)}get was_pass(){return 0!==r.__wbg_get_state_was_pass(this.__wbg_ptr)}set was_pass(t){r.__wbg_set_state_was_pass(this.__wbg_ptr,t)}get is_endgame(){return 0!==r.__wbg_get_state_is_endgame(this.__wbg_ptr)}set is_endgame(t){r.__wbg_set_state_is_endgame(this.__wbg_ptr,t)}static new(){const t=r.state_new();return f.__wrap(t)}step(t){!function(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);t.ptr}(t,_);var e=t.__destroy_into_raw();const n=r.state_step(this.__wbg_ptr,e);return f.__wrap(n)}legal_move_vec(){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.state_legal_move_vec(i,this.__wbg_ptr);var t=u()[i/4+0],e=u()[i/4+1],n=function(t,e){t>>>=0;const n=(null!==d&&0!==d.byteLength||(d=new Uint32Array(r.memory.buffer)),d).subarray(t/4,t/4+e),i=[];for(let t=0;t<n.length;t++)i.push(h(n[t]));return i}(t,e).slice();return r.__wbindgen_free(t,4*e,4),n}finally{r.__wbindgen_add_to_stack_pointer(16)}}get_disc(t,e){const n=r.state_get_disc(this.__wbg_ptr,t,e);return 2===n?void 0:n}}function b(t){return function(t){c===o.length&&o.push(o.length+1);const e=c;return c=o[e],o[e]=t,e}(_.__wrap(t))}function A(t,e){throw new Error((n=t,i=e,n>>>=0,a.decode((null!==s&&0!==s.byteLength||(s=new Uint8Array(r.memory.buffer)),s).subarray(n,n+i))));var n,i}},208:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),s=n.n(a)()(i());s.push([t.id,"html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,SAAS;;EAET,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,0DAA0D;EAC1D,aAAa;;EAEb,2CAA2C;;EAE3C;yGACuG;EACvG,kBAAkB;AACpB;;AAEA;EACE;2CACyC;EACzC,iBAAiB;;EAEjB,gDAAgD;EAChD,WAAW;EACX,YAAY;;EAEZ;2CACyC;EACzC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,4DAA4D;EAC5D,gCAAgC;AAClC;;AAEA,gDAAgD;AAChD;EACE;IACE,WAAW;IACX,YAAY;EACd;AACF;;AAEA,sDAAsD;AACtD;EACE,sDAAsD;EACtD,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:["html {\n  height: 100%;\n  background-color: rgb(34, 34, 34);\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n\n  /* Set the body to be a flex container. */\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n#game-controls-container {\n  /* Fixed 48px height. */\n  flex: 0 1 48px;\n}\n\n#game-svg-container {\n  /* Occupy the remaining space left by the game controls. */\n  flex: 1 1 0px;\n\n  container: game-svg-container-layout / size;\n\n  /* Set position to relative to make the container be the SVG's containing block.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block */\n  position: relative;\n}\n\n#game-svg {\n  /* Maintain the aspect ratio of an SVG in a container.\n   * https://stackoverflow.com/a/66786774 */\n  aspect-ratio: 1/1;\n\n  /* Occupy the entire width if width <= height. */\n  width: 100%;\n  height: auto;\n\n  /* Center the SVG horizontally and vertically.\n   * https://stackoverflow.com/a/23703655 */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  /* Relative to the transformed element's own bounding box. */\n  transform: translate(-50%, -50%);\n}\n\n/* Occupy the entire height if width > height. */\n@container game-svg-container-layout (aspect-ratio > 1/1) {\n  #game-svg {\n    width: auto;\n    height: 100%;\n  }\n}\n\n/* Prevent users from accidentally select the texts. */\n#game-svg text {\n  /* user-select does not work on SVG texts in Safari. */\n  -webkit-user-select: none;\n  user-select: none;\n}\n"],sourceRoot:""}]);const o=s},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,a){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&s[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},511:(t,e,n)=>{var r=n(72),i=n.n(r),a=n(825),s=n.n(a),o=n(659),c=n.n(o),l=n(56),u=n.n(l),d=n(540),h=n.n(d),p=n(113),g=n.n(p),_=n(208),m={};m.styleTagTransform=g(),m.setAttributes=u(),m.insert=c().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=h(),i()(_.A,m),_.A&&_.A.locals&&_.A.locals},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},s=[],o=0;o<t.length;o++){var c=t[o],l=r.base?c[0]+r.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var g=i(p,r);r.byIndex=o,e.splice(o,0,{identifier:d,updater:g,references:1})}s.push(d)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var a=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<a.length;s++){var o=n(a[s]);e[o].references--}for(var c=r(t,i),l=0;l<a.length;l++){var u=n(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},156:(t,e,n)=>{n.a(t,(async(t,e)=>{try{n(511);var r=n(148),i=t([r]);r=(i.then?(await i)():i)[0];var a=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function s(t){try{c(r.next(t))}catch(t){a(t)}}function o(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,o)}c((r=r.apply(t,e||[])).next())}))};function o(){return a(this,void 0,void 0,(function*(){const t=document.querySelector("#game-svg-container");t.innerHTML="";const e=new l,n=new u(e.getSVG());t.appendChild(e.getSVG());{let t=r.Uw.new();for(yield e.setSquareStatesFromGameState(t);!t.is_endgame;){const i=t.legal_move_vec();let a;0===i.length?(alert(`${t.current_player} is out of moves`),a=r.rc.pass()):a=yield n.getMove(i),t=t.step(a),yield e.setSquareStatesFromGameState(t)}alert("Game is over!")}}))}const c="http://www.w3.org/2000/svg";var s;!function(t){t[t.Empty=0]="Empty",t[t.Black=1]="Black",t[t.White=2]="White",t[t.BlackLegalMove=3]="BlackLegalMove",t[t.WhiteLegalMove=4]="WhiteLegalMove"}(s||(s={}));class l{constructor(){this.svg=document.createElementNS(c,"svg"),this.initialize()}getSVG(){return this.svg}setSquareStatesFromGameState(t){return a(this,void 0,void 0,(function*(){const e=t.legal_move_vec().map((t=>t.flat_index())),n=t.current_player===r.ai.Black?s.BlackLegalMove:s.WhiteLegalMove;let i=!0;const a=[];for(let o=0;o<8;++o){const c=[];for(let a=0;a<8;++a){let l;switch(t.get_disc(o,a)){case r.ai.Black:l=s.Black;break;case r.ai.White:l=s.White;break;default:{const t=8*o+a;l=e.includes(t)?n:s.Empty}}l!==this.squares[o][a].getState()&&(i=!1),c.push(l)}a.push(c)}if(!i){for(let t=0;t<8;++t)for(let e=0;e<8;++e)this.squares[t][e].setState(a[t][e]);this.svg.animationsPaused()&&this.svg.unpauseAnimations(),this.svg.setCurrentTime(0),yield new Promise((t=>setTimeout(t,1e3*l.animationDuration)))}}))}static getSquareStateTransitionId(t,e){const n=s[t],r=s[e];return t===e?`square-${n}`:`square-${n}-to-${r}`}initialize(){this.svg.setAttribute("id","game-svg");const t=8*l.squareSize+2*l.marginWidth;this.svg.setAttribute("viewBox",`0 0 ${t} ${t}`),this.svg.innerHTML="",this.createDefs(),this.createBoard(),this.createDiscViews()}createDefs(){const t=document.createElementNS(c,"defs");for(const[e,n,r]of[[l.blackDiscGradientId,"rgb(32, 32, 32)","rgb(24, 24, 24)"],[l.whiteDiscGradientId,"rgb(224, 224, 244)","rgb(168, 168, 168)"]]){const i=document.createElementNS(c,"radialGradient");i.setAttribute("id",e);{const t=document.createElementNS(c,"stop");t.setAttribute("offset","90%"),t.setAttribute("stop-color",n),i.appendChild(t)}{const t=document.createElementNS(c,"stop");t.setAttribute("offset","100%"),t.setAttribute("stop-color",r),i.appendChild(t)}t.appendChild(i)}{const e=document.createElementNS(c,"filter");e.setAttribute("id",l.shadowFilterId);{const t=document.createElementNS(c,"feDropShadow");t.setAttribute("dx","0"),t.setAttribute("dy","0"),t.setAttribute("stdDeviation","0.3"),t.setAttribute("flood-color","black"),t.setAttribute("flood-opacity","1"),e.appendChild(t)}t.appendChild(e)}for(const e in s){const n=Number(e);if(!isNaN(n))for(const e in s){const r=Number(e);isNaN(r)||n===s.Empty&&r===s.Empty||t.appendChild(l.createSquareStateTransition(n,r))}}this.svg.appendChild(t)}createBoard(){{const t=document.createElementNS(c,"rect");for(const e of["x","y"])t.setAttribute(e,l.marginWidth.toString());for(const e of["width","height"])t.setAttribute(e,(8*l.squareSize).toString());t.setAttribute("fill",l.boardBackgroundColor),this.svg.appendChild(t)}{const t=document.createElementNS(c,"g");t.setAttribute("stroke","black"),t.setAttribute("stroke-width",l.gridStrokeWidth.toString());for(let e=0;e<9;++e){const n=l.marginWidth+e*l.squareSize,r=l.marginWidth,i=l.marginWidth+8*l.squareSize;t.appendChild(l.createLine(n,r,n,i)),t.appendChild(l.createLine(r,n,i,n))}this.svg.appendChild(t)}{const t=document.createElementNS(c,"rect");{const e=(l.marginWidth-.5*l.borderStrokeWidth).toString();t.setAttribute("x",e),t.setAttribute("y",e)}{const e=(8*l.squareSize+l.borderStrokeWidth).toString();t.setAttribute("width",e),t.setAttribute("height",e)}{const e=(.5*l.borderStrokeWidth).toString();t.setAttribute("rx",e),t.setAttribute("ry",e)}t.setAttribute("stroke","black"),t.setAttribute("stroke-width",l.borderStrokeWidth.toString()),t.setAttribute("fill","none"),this.svg.appendChild(t)}{const t=document.createElementNS(c,"g");t.setAttribute("fill","black");for(const e of[2,6]){const n=l.marginWidth+e*l.squareSize;for(const e of[2,6]){const r=l.marginWidth+e*l.squareSize,i=document.createElementNS(c,"circle");i.setAttribute("cx",n.toString()),i.setAttribute("cy",r.toString()),i.setAttribute("r",l.dotRadius.toString()),t.appendChild(i)}}this.svg.appendChild(t)}}createDiscViews(){this.squares=[];for(let t=0;t<8;++t){const e=[];for(let n=0;n<8;++n){const r=l.marginWidth+(n+.5)*l.squareSize,i=l.marginWidth+(t+.5)*l.squareSize;e.push(new d(this.svg,r,i))}this.squares.push(e)}}static createSquareStateTransition(t,e){const n=document.createElementNS(c,"g");n.setAttribute("id",l.getSquareStateTransitionId(t,e));const r=l.getDiscVisualProps(t,e),i=l.getDiscVisualProps(e,t),a=document.createElementNS(c,"rect");a.setAttribute("fill","black"),a.setAttribute("filter",`url('#${l.shadowFilterId}')`),n.appendChild(a);const o=document.createElementNS(c,"rect");o.setAttribute("transform","rotate(45, 0, 0)"),n.appendChild(o);const u=document.createElementNS(c,"rect");u.setAttribute("fill",`url('#${l.blackDiscGradientId}')`),n.appendChild(u);const d=document.createElementNS(c,"rect");if(d.setAttribute("fill",`url('#${l.whiteDiscGradientId}')`),n.appendChild(d),!(t!==s.BlackLegalMove&&t!==s.WhiteLegalMove||e!==s.Black&&e!==s.White))for(const t of[a,u,d])t.setAttribute("transform","rotate(45, 0, 0)");if(t===s.Black&&e===s.White||t===s.White&&e===s.Black){const t=document.createElementNS(c,"animateTransform");t.setAttribute("attributeName","transform"),t.setAttribute("attributeType","XML"),t.setAttribute("dur",`${l.animationDuration}s`),t.setAttribute("calcMode","spline"),t.setAttribute("fill","freeze"),t.setAttribute("type","scale"),t.setAttribute("values","1 1; 0.2 1; 1 1"),t.setAttribute("keyTimes","0;0.5;1"),t.setAttribute("keySplines","0.5 0.1 0.9 0.5;0.1 0.5 0.5 0.9");for(const e of[a,u,d])e.appendChild(t.cloneNode())}for(const t of[a,o,u,d]){for(const e of["x","y"])l.addAttributeOrAnimation(t,e,.5*-r.size,.5*-i.size);for(const e of["width","height"])l.addAttributeOrAnimation(t,e,r.size,i.size);for(const e of["rx","ry"])l.addAttributeOrAnimation(t,e,r.cornerRadius,i.cornerRadius)}return l.addAttributeOrAnimation(a,"opacity",r.shadowOpacity,i.shadowOpacity),l.addAttributeOrAnimation(o,"fill",r.legalMoveIndicatorFill,i.legalMoveIndicatorFill),l.addAttributeOrAnimation(o,"fill-opacity",r.legalMoveIndicatorOpacity,i.legalMoveIndicatorOpacity),l.addAttributeOrAnimation(u,"fill-opacity",r.blackDiscOpacity,i.blackDiscOpacity),l.addAttributeOrAnimation(d,"fill-opacity",r.whiteDiscOpacity,i.whiteDiscOpacity),n}static getDiscVisualProps(t,e){if(t===s.Empty&&e===s.Empty)throw new Error("state and counterpart cannot both be empty");let n,r,i,a,o,c,u;if(t===s.Empty){const s=l.getDiscVisualProps(e,t);n=.5*s.size,r=.5*s.cornerRadius,i=0,a=s.legalMoveIndicatorFill,o=0,c=0,u=0}else{switch(t){case s.Black:case s.White:n=2*l.discRadius,r=l.discRadius,i=1,o=0,t===s.Black?(c=1,u=0):(c=0,u=1);break;case s.BlackLegalMove:case s.WhiteLegalMove:n=l.legalMoveSquareSize,r=0,i=0,o=.5,c=0,u=0;break;default:throw new Error("Invalid state")}switch(t){case s.Black:case s.BlackLegalMove:a="black";break;case s.White:case s.WhiteLegalMove:a="white";break;default:throw new Error("Invalid state")}}return{size:n,cornerRadius:r,shadowOpacity:i,legalMoveIndicatorFill:a,legalMoveIndicatorOpacity:o,blackDiscOpacity:c,whiteDiscOpacity:u}}static addAttributeOrAnimation(t,e,n,r){if(n===r)return void t.setAttribute(e,r.toString());const i=document.createElementNS(c,"animate");i.setAttribute("attributeName",e),i.setAttribute("dur",`${l.animationDuration}s`),i.setAttribute("calcMode","spline"),i.setAttribute("fill","freeze"),i.setAttribute("values",`${n};${r}`),i.setAttribute("keyTimes","0;1"),i.setAttribute("keySplines","0.1 0.5 0.5 0.9"),t.appendChild(i)}static createLine(t,e,n,r){const i=document.createElementNS(c,"line");return i.setAttribute("x1",t.toString()),i.setAttribute("y1",e.toString()),i.setAttribute("x2",n.toString()),i.setAttribute("y2",r.toString()),i}}l.squareSize=10,l.marginWidth=3,l.gridStrokeWidth=.2,l.borderStrokeWidth=1,l.dotRadius=.75,l.discRadius=4,l.legalMoveSquareSize=4,l.blackDiscGradientId="black-disc-gradient",l.whiteDiscGradientId="white-disc-gradient",l.shadowFilterId="shadow-filter",l.boardBackgroundColor="rgb(63, 142, 106)",l.animationDuration=.5;class u{constructor(t){this.svg=t,this.onClick=t=>{if(0===this.legalMoveFlatIndices.length){if(null!==this.resolveActionPromise)throw new Error("No legal move is available but an action promise is set");return}if(null===this.resolveActionPromise)throw new Error("Legal moves are available but no action promise is set");const e=new DOMPoint(t.clientX,t.clientY),n=this.svg.getScreenCTM();if(null===n)throw new Error("Failed to get the screen CTM");const i=e.matrixTransform(n.inverse());let a=(i.y-l.marginWidth)/l.squareSize;if(a<0||a>=8)return;a=Math.floor(a);let s=(i.x-l.marginWidth)/l.squareSize;if(s<0||s>=8)return;s=Math.floor(s);const o=8*a+s;if(!this.legalMoveFlatIndices.includes(o))return;this.legalMoveFlatIndices=[];const c=this.resolveActionPromise;this.resolveActionPromise=null,c(r.rc.from_flat_index(o))},this.svg.addEventListener("click",this.onClick),this.legalMoveFlatIndices=[],this.resolveActionPromise=null}[Symbol.dispose](){this.svg.removeEventListener("click",this.onClick)}getMove(t){if(0===t.length)throw new Error("No legal move is available");return this.legalMoveFlatIndices=t.map((t=>t.flat_index())),new Promise((t=>{this.resolveActionPromise=t}))}}class d{constructor(t,e,n){this.svg=t,this.centerX=e,this.centerY=n,this.state=s.Empty,this.useElement=null}getState(){return this.state}setState(t){if(t===s.Empty&&this.state===s.Empty)return void(null!==this.useElement&&(this.useElement.remove(),this.useElement=null));null===this.useElement&&(this.useElement=document.createElementNS(c,"use"),this.svg.appendChild(this.useElement));const e=l.getSquareStateTransitionId(this.state,t);this.useElement.setAttribute("href",`#${e}`),this.useElement.setAttribute("transform",`translate(${this.centerX}, ${this.centerY})`),this.state=t}}o().catch(console.error),e()}catch(h){e(h)}}))},504:(t,e,n)=>{var r=n(800);t.exports=n.v(e,t.id,"baab4132998f0614f037",{"./othello_rs_bg.js":{__wbg_action_new:r.xv,__wbindgen_throw:r.Qn}})}},a={};function s(t){var e=a[t];if(void 0!==e)return e.exports;var n=a[t]={id:t,loaded:!1,exports:{}};return i[t](n,n.exports,s),n.loaded=!0,n.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},s.a=(i,a,s)=>{var o;s&&((o=[]).d=-1);var c,l,u,d=new Set,h=i.exports,p=new Promise(((t,e)=>{u=e,l=t}));p[e]=h,p[t]=t=>(o&&t(o),d.forEach(t),p.catch((t=>{}))),i.exports=p,a((i=>{var a;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[t])return i;if(i.then){var a=[];a.d=0,i.then((t=>{s[e]=t,r(a)}),(t=>{s[n]=t,r(a)}));var s={};return s[t]=t=>t(a),s}}var o={};return o[t]=t=>{},o[e]=i,o})))(i);var s=()=>c.map((t=>{if(t[n])throw t[n];return t[e]})),l=new Promise((e=>{(a=()=>e(s)).r=0;var n=t=>t!==o&&!d.has(t)&&(d.add(t),t&&!t.d&&(a.r++,t.push(a)));c.map((e=>e[t](n)))}));return a.r?l:s()}),(t=>(t?u(p[n]=t):l(h),r(o)))),o&&o.d<0&&(o.d=0)},s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.v=(t,e,n,r)=>{var i=fetch(s.p+""+n+".module.wasm"),a=()=>i.then((t=>t.arrayBuffer())).then((t=>WebAssembly.instantiate(t,r))).then((e=>Object.assign(t,e.instance.exports)));return i.then((e=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(e,r).then((e=>Object.assign(t,e.instance.exports)),(t=>{if("application/wasm"!==e.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t),a();throw t})):a()))},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),s.nc=void 0,s(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,